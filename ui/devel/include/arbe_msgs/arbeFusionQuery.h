// Generated by gencpp from file arbe_msgs/arbeFusionQuery.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEFUSIONQUERY_H
#define ARBE_MSGS_MESSAGE_ARBEFUSIONQUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeFusionQuery_
{
  typedef arbeFusionQuery_<ContainerAllocator> Type;

  arbeFusionQuery_()
    : obj_id(0)
    , top(0)
    , left(0)
    , bottom(0)
    , right(0)
    , query_id(0)
    , query_time(0)
    , obj_index(0)
    , tta_count(0)
    , tta_scores()  {
    }
  arbeFusionQuery_(const ContainerAllocator& _alloc)
    : obj_id(0)
    , top(0)
    , left(0)
    , bottom(0)
    , right(0)
    , query_id(0)
    , query_time(0)
    , obj_index(0)
    , tta_count(0)
    , tta_scores(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _obj_id_type;
  _obj_id_type obj_id;

   typedef uint16_t _top_type;
  _top_type top;

   typedef uint16_t _left_type;
  _left_type left;

   typedef uint16_t _bottom_type;
  _bottom_type bottom;

   typedef uint16_t _right_type;
  _right_type right;

   typedef uint32_t _query_id_type;
  _query_id_type query_id;

   typedef uint64_t _query_time_type;
  _query_time_type query_time;

   typedef uint16_t _obj_index_type;
  _obj_index_type obj_index;

   typedef uint8_t _tta_count_type;
  _tta_count_type tta_count;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tta_scores_type;
  _tta_scores_type tta_scores;





  typedef boost::shared_ptr< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> const> ConstPtr;

}; // struct arbeFusionQuery_

typedef ::arbe_msgs::arbeFusionQuery_<std::allocator<void> > arbeFusionQuery;

typedef boost::shared_ptr< ::arbe_msgs::arbeFusionQuery > arbeFusionQueryPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeFusionQuery const> arbeFusionQueryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator2> & rhs)
{
  return lhs.obj_id == rhs.obj_id &&
    lhs.top == rhs.top &&
    lhs.left == rhs.left &&
    lhs.bottom == rhs.bottom &&
    lhs.right == rhs.right &&
    lhs.query_id == rhs.query_id &&
    lhs.query_time == rhs.query_time &&
    lhs.obj_index == rhs.obj_index &&
    lhs.tta_count == rhs.tta_count &&
    lhs.tta_scores == rhs.tta_scores;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6277f1c47cde1be60fd589e75618a8d";
  }

  static const char* value(const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6277f1c47cde1beULL;
  static const uint64_t static_value2 = 0x60fd589e75618a8dULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeFusionQuery";
  }

  static const char* value(const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16  	obj_id\n"
"uint16  	top\n"
"uint16  	left\n"
"uint16  	bottom\n"
"uint16  	right\n"
"uint32  	query_id\n"
"uint64	  	query_time\n"
"uint16  	obj_index\n"
"uint8  	tta_count\n"
"float32[] tta_scores\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_id);
      stream.next(m.top);
      stream.next(m.left);
      stream.next(m.bottom);
      stream.next(m.right);
      stream.next(m.query_id);
      stream.next(m.query_time);
      stream.next(m.obj_index);
      stream.next(m.tta_count);
      stream.next(m.tta_scores);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeFusionQuery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeFusionQuery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeFusionQuery_<ContainerAllocator>& v)
  {
    s << indent << "obj_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obj_id);
    s << indent << "top: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.top);
    s << indent << "left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.left);
    s << indent << "bottom: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bottom);
    s << indent << "right: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.right);
    s << indent << "query_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.query_id);
    s << indent << "query_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.query_time);
    s << indent << "obj_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obj_index);
    s << indent << "tta_count: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tta_count);
    s << indent << "tta_scores[]" << std::endl;
    for (size_t i = 0; i < v.tta_scores.size(); ++i)
    {
      s << indent << "  tta_scores[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tta_scores[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEFUSIONQUERY_H
