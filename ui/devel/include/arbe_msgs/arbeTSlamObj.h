// Generated by gencpp from file arbe_msgs/arbeTSlamObj.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBETSLAMOBJ_H
#define ARBE_MSGS_MESSAGE_ARBETSLAMOBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arbe_msgs/arbeTSlamPos.h>
#include <arbe_msgs/arbeTSlamVelocity.h>
#include <arbe_msgs/arbeTSlamBox.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeTSlamObj_
{
  typedef arbeTSlamObj_<ContainerAllocator> Type;

  arbeTSlamObj_()
    : ID(0)
    , obj_class(0)
    , class_conf(0.0)
    , position()
    , velocity()
    , bounding_box()
    , age(0)
    , last_frame_update(0)  {
    }
  arbeTSlamObj_(const ContainerAllocator& _alloc)
    : ID(0)
    , obj_class(0)
    , class_conf(0.0)
    , position(_alloc)
    , velocity(_alloc)
    , bounding_box(_alloc)
    , age(0)
    , last_frame_update(0)  {
  (void)_alloc;
    }



   typedef uint16_t _ID_type;
  _ID_type ID;

   typedef uint16_t _obj_class_type;
  _obj_class_type obj_class;

   typedef float _class_conf_type;
  _class_conf_type class_conf;

   typedef  ::arbe_msgs::arbeTSlamPos_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::arbe_msgs::arbeTSlamBox_<ContainerAllocator>  _bounding_box_type;
  _bounding_box_type bounding_box;

   typedef uint32_t _age_type;
  _age_type age;

   typedef uint16_t _last_frame_update_type;
  _last_frame_update_type last_frame_update;





  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> const> ConstPtr;

}; // struct arbeTSlamObj_

typedef ::arbe_msgs::arbeTSlamObj_<std::allocator<void> > arbeTSlamObj;

typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamObj > arbeTSlamObjPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamObj const> arbeTSlamObjConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.obj_class == rhs.obj_class &&
    lhs.class_conf == rhs.class_conf &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.bounding_box == rhs.bounding_box &&
    lhs.age == rhs.age &&
    lhs.last_frame_update == rhs.last_frame_update;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1eb101416f9437d15058033f4585fe65";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1eb101416f9437d1ULL;
  static const uint64_t static_value2 = 0x5058033f4585fe65ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeTSlamObj";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16              ID\n"
"uint16              obj_class\n"
"float32             class_conf\n"
"arbeTSlamPos        position\n"
"arbeTSlamVelocity   velocity \n"
"arbeTSlamBox        bounding_box\n"
"uint32              age\n"
"uint16              last_frame_update\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamPos\n"
"float32 x \n"
"float32 y \n"
"float32 z \n"
"float32  dx \n"
"float32  dy \n"
"float32  dz\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamVelocity\n"
"float32     x_dot \n"
"float32     y_dot \n"
"float32      dx_dot \n"
"float32      dy_dot \n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamBox\n"
"float32 scale_x     \n"
"float32 scale_y     \n"
"float32 scale_z     \n"
"float32 scale_x_unc \n"
"float32 scale_y_unc \n"
"float32 scale_z_unc \n"
"float32 orientation_unc  \n"
"float32 orientation  \n"
;
  }

  static const char* value(const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.obj_class);
      stream.next(m.class_conf);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.bounding_box);
      stream.next(m.age);
      stream.next(m.last_frame_update);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeTSlamObj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeTSlamObj_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "obj_class: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obj_class);
    s << indent << "class_conf: ";
    Printer<float>::stream(s, indent + "  ", v.class_conf);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeTSlamPos_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "bounding_box: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_box);
    s << indent << "age: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.age);
    s << indent << "last_frame_update: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.last_frame_update);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBETSLAMOBJ_H
