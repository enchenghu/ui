// Generated by gencpp from file arbe_msgs/arbeClassSingleQuery.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBECLASSSINGLEQUERY_H
#define ARBE_MSGS_MESSAGE_ARBECLASSSINGLEQUERY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeClassSingleQuery_
{
  typedef arbeClassSingleQuery_<ContainerAllocator> Type;

  arbeClassSingleQuery_()
    : obj_id(0)
    , obj_index(0)
    , n_points(0)
    , xyzvp()
    , xyzvp_center()
    , tta_scores()
    , tta_count(0)  {
    }
  arbeClassSingleQuery_(const ContainerAllocator& _alloc)
    : obj_id(0)
    , obj_index(0)
    , n_points(0)
    , xyzvp(_alloc)
    , xyzvp_center(_alloc)
    , tta_scores(_alloc)
    , tta_count(0)  {
  (void)_alloc;
    }



   typedef uint16_t _obj_id_type;
  _obj_id_type obj_id;

   typedef uint16_t _obj_index_type;
  _obj_index_type obj_index;

   typedef uint16_t _n_points_type;
  _n_points_type n_points;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _xyzvp_type;
  _xyzvp_type xyzvp;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _xyzvp_center_type;
  _xyzvp_center_type xyzvp_center;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tta_scores_type;
  _tta_scores_type tta_scores;

   typedef uint32_t _tta_count_type;
  _tta_count_type tta_count;





  typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> const> ConstPtr;

}; // struct arbeClassSingleQuery_

typedef ::arbe_msgs::arbeClassSingleQuery_<std::allocator<void> > arbeClassSingleQuery;

typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleQuery > arbeClassSingleQueryPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleQuery const> arbeClassSingleQueryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator2> & rhs)
{
  return lhs.obj_id == rhs.obj_id &&
    lhs.obj_index == rhs.obj_index &&
    lhs.n_points == rhs.n_points &&
    lhs.xyzvp == rhs.xyzvp &&
    lhs.xyzvp_center == rhs.xyzvp_center &&
    lhs.tta_scores == rhs.tta_scores &&
    lhs.tta_count == rhs.tta_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64f8fe3f54997e174c21d53624f859dd";
  }

  static const char* value(const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64f8fe3f54997e17ULL;
  static const uint64_t static_value2 = 0x4c21d53624f859ddULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeClassSingleQuery";
  }

  static const char* value(const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 obj_id\n"
"uint16 obj_index\n"
"uint16 n_points\n"
"float32[] xyzvp\n"
"float32[] xyzvp_center\n"
"float32[] tta_scores\n"
"uint32 tta_count\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_id);
      stream.next(m.obj_index);
      stream.next(m.n_points);
      stream.next(m.xyzvp);
      stream.next(m.xyzvp_center);
      stream.next(m.tta_scores);
      stream.next(m.tta_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeClassSingleQuery_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator>& v)
  {
    s << indent << "obj_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obj_id);
    s << indent << "obj_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obj_index);
    s << indent << "n_points: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.n_points);
    s << indent << "xyzvp[]" << std::endl;
    for (size_t i = 0; i < v.xyzvp.size(); ++i)
    {
      s << indent << "  xyzvp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.xyzvp[i]);
    }
    s << indent << "xyzvp_center[]" << std::endl;
    for (size_t i = 0; i < v.xyzvp_center.size(); ++i)
    {
      s << indent << "  xyzvp_center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.xyzvp_center[i]);
    }
    s << indent << "tta_scores[]" << std::endl;
    for (size_t i = 0; i < v.tta_scores.size(); ++i)
    {
      s << indent << "  tta_scores[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tta_scores[i]);
    }
    s << indent << "tta_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tta_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBECLASSSINGLEQUERY_H
