// Generated by gencpp from file arbe_msgs/arbePcBins.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEPCBINS_H
#define ARBE_MSGS_MESSAGE_ARBEPCBINS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbePcBins_
{
  typedef arbePcBins_<ContainerAllocator> Type;

  arbePcBins_()
    : range_bin()
    , doppler_signed_bin()
    , azimuth_signed_bin()
    , elevation_signed_bin()
    , phase()
    , power()  {
    }
  arbePcBins_(const ContainerAllocator& _alloc)
    : range_bin(_alloc)
    , doppler_signed_bin(_alloc)
    , azimuth_signed_bin(_alloc)
    , elevation_signed_bin(_alloc)
    , phase(_alloc)
    , power(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _range_bin_type;
  _range_bin_type range_bin;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _doppler_signed_bin_type;
  _doppler_signed_bin_type doppler_signed_bin;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _azimuth_signed_bin_type;
  _azimuth_signed_bin_type azimuth_signed_bin;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _elevation_signed_bin_type;
  _elevation_signed_bin_type elevation_signed_bin;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _phase_type;
  _phase_type phase;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::arbe_msgs::arbePcBins_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbePcBins_<ContainerAllocator> const> ConstPtr;

}; // struct arbePcBins_

typedef ::arbe_msgs::arbePcBins_<std::allocator<void> > arbePcBins;

typedef boost::shared_ptr< ::arbe_msgs::arbePcBins > arbePcBinsPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbePcBins const> arbePcBinsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbePcBins_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbePcBins_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbePcBins_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbePcBins_<ContainerAllocator2> & rhs)
{
  return lhs.range_bin == rhs.range_bin &&
    lhs.doppler_signed_bin == rhs.doppler_signed_bin &&
    lhs.azimuth_signed_bin == rhs.azimuth_signed_bin &&
    lhs.elevation_signed_bin == rhs.elevation_signed_bin &&
    lhs.phase == rhs.phase &&
    lhs.power == rhs.power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbePcBins_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbePcBins_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbePcBins_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbePcBins_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbePcBins_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1053c45295755db3ee1eadc1a2005cf0";
  }

  static const char* value(const ::arbe_msgs::arbePcBins_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1053c45295755db3ULL;
  static const uint64_t static_value2 = 0xee1eadc1a2005cf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbePcBins";
  }

  static const char* value(const ::arbe_msgs::arbePcBins_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16[] range_bin\n"
"int16[] doppler_signed_bin\n"
"int8[] azimuth_signed_bin\n"
"int8[] elevation_signed_bin\n"
"int16[] phase\n"
"int16[] power\n"
"\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbePcBins_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range_bin);
      stream.next(m.doppler_signed_bin);
      stream.next(m.azimuth_signed_bin);
      stream.next(m.elevation_signed_bin);
      stream.next(m.phase);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbePcBins_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbePcBins_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbePcBins_<ContainerAllocator>& v)
  {
    s << indent << "range_bin[]" << std::endl;
    for (size_t i = 0; i < v.range_bin.size(); ++i)
    {
      s << indent << "  range_bin[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.range_bin[i]);
    }
    s << indent << "doppler_signed_bin[]" << std::endl;
    for (size_t i = 0; i < v.doppler_signed_bin.size(); ++i)
    {
      s << indent << "  doppler_signed_bin[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.doppler_signed_bin[i]);
    }
    s << indent << "azimuth_signed_bin[]" << std::endl;
    for (size_t i = 0; i < v.azimuth_signed_bin.size(); ++i)
    {
      s << indent << "  azimuth_signed_bin[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.azimuth_signed_bin[i]);
    }
    s << indent << "elevation_signed_bin[]" << std::endl;
    for (size_t i = 0; i < v.elevation_signed_bin.size(); ++i)
    {
      s << indent << "  elevation_signed_bin[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.elevation_signed_bin[i]);
    }
    s << indent << "phase[]" << std::endl;
    for (size_t i = 0; i < v.phase.size(); ++i)
    {
      s << indent << "  phase[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.phase[i]);
    }
    s << indent << "power[]" << std::endl;
    for (size_t i = 0; i < v.power.size(); ++i)
    {
      s << indent << "  power[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.power[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEPCBINS_H
