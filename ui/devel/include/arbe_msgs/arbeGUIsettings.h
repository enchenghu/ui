// Generated by gencpp from file arbe_msgs/arbeGUIsettings.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEGUISETTINGS_H
#define ARBE_MSGS_MESSAGE_ARBEGUISETTINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <arbe_msgs/arbeSlamDisplaySettings.h>
#include <arbe_msgs/arbeSettingsPerRadar.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeGUIsettings_
{
  typedef arbeGUIsettings_<ContainerAllocator> Type;

  arbeGUIsettings_()
    : header()
    , mode(0)
    , range(0)
    , threshold3d(0)
    , threshold4d(0)
    , DynamicAzimuth(0)
    , DynamicElevation(0)
    , cam_euler_alpha(0.0)
    , cam_euler_beta(0.0)
    , cam_euler_gamma(0.0)
    , isNtc3dOn(false)
    , isNtc4dOn(false)
    , isCfar3dOn(false)
    , isCfar4dOn(false)
    , isPhaseEnabled(false)
    , isMetaDataEnabled(false)
    , ColoringType()
    , MinDoppler(0.0)
    , MaxDoppler(0.0)
    , showFloatingText(false)
    , coloring_cc_min(0.0)
    , coloring_cc_max(0.0)
    , discardOutOfElContext(false)
    , disp_processed_pc(false)
    , disp_slam(false)
    , noise_level_db(0)
    , selectedAzimuthBin(0)
    , tx_started(false)
    , radar_id(0)
    , radar_x_offset(0.0)
    , radar_y_offset(0.0)
    , radar_z_offset(0.0)
    , radar_yaw_angle(0.0)
    , radar_pitch_angle(0.0)
    , localization_active(false)
    , aggregation_active(false)
    , slam_display()
    , per_radar()
    , color_obj_by_class(false)
    , marker_text_size(0)  {
    }
  arbeGUIsettings_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , range(0)
    , threshold3d(0)
    , threshold4d(0)
    , DynamicAzimuth(0)
    , DynamicElevation(0)
    , cam_euler_alpha(0.0)
    , cam_euler_beta(0.0)
    , cam_euler_gamma(0.0)
    , isNtc3dOn(false)
    , isNtc4dOn(false)
    , isCfar3dOn(false)
    , isCfar4dOn(false)
    , isPhaseEnabled(false)
    , isMetaDataEnabled(false)
    , ColoringType(_alloc)
    , MinDoppler(0.0)
    , MaxDoppler(0.0)
    , showFloatingText(false)
    , coloring_cc_min(0.0)
    , coloring_cc_max(0.0)
    , discardOutOfElContext(false)
    , disp_processed_pc(false)
    , disp_slam(false)
    , noise_level_db(0)
    , selectedAzimuthBin(0)
    , tx_started(false)
    , radar_id(0)
    , radar_x_offset(0.0)
    , radar_y_offset(0.0)
    , radar_z_offset(0.0)
    , radar_yaw_angle(0.0)
    , radar_pitch_angle(0.0)
    , localization_active(false)
    , aggregation_active(false)
    , slam_display(_alloc)
    , per_radar(_alloc)
    , color_obj_by_class(false)
    , marker_text_size(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _range_type;
  _range_type range;

   typedef int32_t _threshold3d_type;
  _threshold3d_type threshold3d;

   typedef int32_t _threshold4d_type;
  _threshold4d_type threshold4d;

   typedef int32_t _DynamicAzimuth_type;
  _DynamicAzimuth_type DynamicAzimuth;

   typedef int32_t _DynamicElevation_type;
  _DynamicElevation_type DynamicElevation;

   typedef float _cam_euler_alpha_type;
  _cam_euler_alpha_type cam_euler_alpha;

   typedef float _cam_euler_beta_type;
  _cam_euler_beta_type cam_euler_beta;

   typedef float _cam_euler_gamma_type;
  _cam_euler_gamma_type cam_euler_gamma;

   typedef uint8_t _isNtc3dOn_type;
  _isNtc3dOn_type isNtc3dOn;

   typedef uint8_t _isNtc4dOn_type;
  _isNtc4dOn_type isNtc4dOn;

   typedef uint8_t _isCfar3dOn_type;
  _isCfar3dOn_type isCfar3dOn;

   typedef uint8_t _isCfar4dOn_type;
  _isCfar4dOn_type isCfar4dOn;

   typedef uint8_t _isPhaseEnabled_type;
  _isPhaseEnabled_type isPhaseEnabled;

   typedef uint8_t _isMetaDataEnabled_type;
  _isMetaDataEnabled_type isMetaDataEnabled;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ColoringType_type;
  _ColoringType_type ColoringType;

   typedef float _MinDoppler_type;
  _MinDoppler_type MinDoppler;

   typedef float _MaxDoppler_type;
  _MaxDoppler_type MaxDoppler;

   typedef uint8_t _showFloatingText_type;
  _showFloatingText_type showFloatingText;

   typedef float _coloring_cc_min_type;
  _coloring_cc_min_type coloring_cc_min;

   typedef float _coloring_cc_max_type;
  _coloring_cc_max_type coloring_cc_max;

   typedef uint8_t _discardOutOfElContext_type;
  _discardOutOfElContext_type discardOutOfElContext;

   typedef uint8_t _disp_processed_pc_type;
  _disp_processed_pc_type disp_processed_pc;

   typedef uint8_t _disp_slam_type;
  _disp_slam_type disp_slam;

   typedef int8_t _noise_level_db_type;
  _noise_level_db_type noise_level_db;

   typedef int32_t _selectedAzimuthBin_type;
  _selectedAzimuthBin_type selectedAzimuthBin;

   typedef uint8_t _tx_started_type;
  _tx_started_type tx_started;

   typedef int32_t _radar_id_type;
  _radar_id_type radar_id;

   typedef float _radar_x_offset_type;
  _radar_x_offset_type radar_x_offset;

   typedef float _radar_y_offset_type;
  _radar_y_offset_type radar_y_offset;

   typedef float _radar_z_offset_type;
  _radar_z_offset_type radar_z_offset;

   typedef float _radar_yaw_angle_type;
  _radar_yaw_angle_type radar_yaw_angle;

   typedef float _radar_pitch_angle_type;
  _radar_pitch_angle_type radar_pitch_angle;

   typedef uint8_t _localization_active_type;
  _localization_active_type localization_active;

   typedef uint8_t _aggregation_active_type;
  _aggregation_active_type aggregation_active;

   typedef  ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator>  _slam_display_type;
  _slam_display_type slam_display;

   typedef  ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator>  _per_radar_type;
  _per_radar_type per_radar;

   typedef uint8_t _color_obj_by_class_type;
  _color_obj_by_class_type color_obj_by_class;

   typedef int32_t _marker_text_size_type;
  _marker_text_size_type marker_text_size;





  typedef boost::shared_ptr< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> const> ConstPtr;

}; // struct arbeGUIsettings_

typedef ::arbe_msgs::arbeGUIsettings_<std::allocator<void> > arbeGUIsettings;

typedef boost::shared_ptr< ::arbe_msgs::arbeGUIsettings > arbeGUIsettingsPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeGUIsettings const> arbeGUIsettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.range == rhs.range &&
    lhs.threshold3d == rhs.threshold3d &&
    lhs.threshold4d == rhs.threshold4d &&
    lhs.DynamicAzimuth == rhs.DynamicAzimuth &&
    lhs.DynamicElevation == rhs.DynamicElevation &&
    lhs.cam_euler_alpha == rhs.cam_euler_alpha &&
    lhs.cam_euler_beta == rhs.cam_euler_beta &&
    lhs.cam_euler_gamma == rhs.cam_euler_gamma &&
    lhs.isNtc3dOn == rhs.isNtc3dOn &&
    lhs.isNtc4dOn == rhs.isNtc4dOn &&
    lhs.isCfar3dOn == rhs.isCfar3dOn &&
    lhs.isCfar4dOn == rhs.isCfar4dOn &&
    lhs.isPhaseEnabled == rhs.isPhaseEnabled &&
    lhs.isMetaDataEnabled == rhs.isMetaDataEnabled &&
    lhs.ColoringType == rhs.ColoringType &&
    lhs.MinDoppler == rhs.MinDoppler &&
    lhs.MaxDoppler == rhs.MaxDoppler &&
    lhs.showFloatingText == rhs.showFloatingText &&
    lhs.coloring_cc_min == rhs.coloring_cc_min &&
    lhs.coloring_cc_max == rhs.coloring_cc_max &&
    lhs.discardOutOfElContext == rhs.discardOutOfElContext &&
    lhs.disp_processed_pc == rhs.disp_processed_pc &&
    lhs.disp_slam == rhs.disp_slam &&
    lhs.noise_level_db == rhs.noise_level_db &&
    lhs.selectedAzimuthBin == rhs.selectedAzimuthBin &&
    lhs.tx_started == rhs.tx_started &&
    lhs.radar_id == rhs.radar_id &&
    lhs.radar_x_offset == rhs.radar_x_offset &&
    lhs.radar_y_offset == rhs.radar_y_offset &&
    lhs.radar_z_offset == rhs.radar_z_offset &&
    lhs.radar_yaw_angle == rhs.radar_yaw_angle &&
    lhs.radar_pitch_angle == rhs.radar_pitch_angle &&
    lhs.localization_active == rhs.localization_active &&
    lhs.aggregation_active == rhs.aggregation_active &&
    lhs.slam_display == rhs.slam_display &&
    lhs.per_radar == rhs.per_radar &&
    lhs.color_obj_by_class == rhs.color_obj_by_class &&
    lhs.marker_text_size == rhs.marker_text_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ab680bfc9fa5170d24dd6773926eca5";
  }

  static const char* value(const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ab680bfc9fa5170ULL;
  static const uint64_t static_value2 = 0xd24dd6773926eca5ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeGUIsettings";
  }

  static const char* value(const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int32 mode\n"
"int32 range\n"
"int32 threshold3d\n"
"int32 threshold4d\n"
"int32 DynamicAzimuth\n"
"int32 DynamicElevation\n"
"float32 cam_euler_alpha\n"
"float32 cam_euler_beta\n"
"float32 cam_euler_gamma\n"
"bool  isNtc3dOn\n"
"bool  isNtc4dOn\n"
"bool  isCfar3dOn\n"
"bool  isCfar4dOn\n"
"bool  isPhaseEnabled\n"
"bool  isMetaDataEnabled\n"
"string ColoringType\n"
"float32 MinDoppler\n"
"float32 MaxDoppler\n"
"bool showFloatingText\n"
"float32 coloring_cc_min\n"
"float32 coloring_cc_max\n"
"bool discardOutOfElContext\n"
"bool disp_processed_pc\n"
"bool disp_slam\n"
"int8 noise_level_db\n"
"int32 selectedAzimuthBin\n"
"bool tx_started\n"
"int32 radar_id\n"
"float32 radar_x_offset\n"
"float32 radar_y_offset\n"
"float32 radar_z_offset\n"
"float32 radar_yaw_angle\n"
"float32 radar_pitch_angle\n"
"bool localization_active\n"
"bool aggregation_active\n"
"arbeSlamDisplaySettings slam_display\n"
"arbeSettingsPerRadar per_radar\n"
"bool color_obj_by_class\n"
"int32 marker_text_size\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeSlamDisplaySettings\n"
"bool slam_on_camera\n"
"bool disp_dist_on_cam\n"
"bool color_by_class\n"
"bool show_classification\n"
"bool disp_funnel\n"
"bool disp_FS_on_cam\n"
"bool disp_slam_eco_mode\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeSettingsPerRadar\n"
"uint8 n_radars\n"
"int8  radar_for_text\n"
"float32[] ant_height\n"
"float32[] ant_pitch\n"
"float32[] cam_euler_a\n"
"float32[] cam_euler_b\n"
"float32[] cam_euler_g\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.range);
      stream.next(m.threshold3d);
      stream.next(m.threshold4d);
      stream.next(m.DynamicAzimuth);
      stream.next(m.DynamicElevation);
      stream.next(m.cam_euler_alpha);
      stream.next(m.cam_euler_beta);
      stream.next(m.cam_euler_gamma);
      stream.next(m.isNtc3dOn);
      stream.next(m.isNtc4dOn);
      stream.next(m.isCfar3dOn);
      stream.next(m.isCfar4dOn);
      stream.next(m.isPhaseEnabled);
      stream.next(m.isMetaDataEnabled);
      stream.next(m.ColoringType);
      stream.next(m.MinDoppler);
      stream.next(m.MaxDoppler);
      stream.next(m.showFloatingText);
      stream.next(m.coloring_cc_min);
      stream.next(m.coloring_cc_max);
      stream.next(m.discardOutOfElContext);
      stream.next(m.disp_processed_pc);
      stream.next(m.disp_slam);
      stream.next(m.noise_level_db);
      stream.next(m.selectedAzimuthBin);
      stream.next(m.tx_started);
      stream.next(m.radar_id);
      stream.next(m.radar_x_offset);
      stream.next(m.radar_y_offset);
      stream.next(m.radar_z_offset);
      stream.next(m.radar_yaw_angle);
      stream.next(m.radar_pitch_angle);
      stream.next(m.localization_active);
      stream.next(m.aggregation_active);
      stream.next(m.slam_display);
      stream.next(m.per_radar);
      stream.next(m.color_obj_by_class);
      stream.next(m.marker_text_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeGUIsettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeGUIsettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeGUIsettings_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "range: ";
    Printer<int32_t>::stream(s, indent + "  ", v.range);
    s << indent << "threshold3d: ";
    Printer<int32_t>::stream(s, indent + "  ", v.threshold3d);
    s << indent << "threshold4d: ";
    Printer<int32_t>::stream(s, indent + "  ", v.threshold4d);
    s << indent << "DynamicAzimuth: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DynamicAzimuth);
    s << indent << "DynamicElevation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DynamicElevation);
    s << indent << "cam_euler_alpha: ";
    Printer<float>::stream(s, indent + "  ", v.cam_euler_alpha);
    s << indent << "cam_euler_beta: ";
    Printer<float>::stream(s, indent + "  ", v.cam_euler_beta);
    s << indent << "cam_euler_gamma: ";
    Printer<float>::stream(s, indent + "  ", v.cam_euler_gamma);
    s << indent << "isNtc3dOn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isNtc3dOn);
    s << indent << "isNtc4dOn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isNtc4dOn);
    s << indent << "isCfar3dOn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isCfar3dOn);
    s << indent << "isCfar4dOn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isCfar4dOn);
    s << indent << "isPhaseEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isPhaseEnabled);
    s << indent << "isMetaDataEnabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isMetaDataEnabled);
    s << indent << "ColoringType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ColoringType);
    s << indent << "MinDoppler: ";
    Printer<float>::stream(s, indent + "  ", v.MinDoppler);
    s << indent << "MaxDoppler: ";
    Printer<float>::stream(s, indent + "  ", v.MaxDoppler);
    s << indent << "showFloatingText: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.showFloatingText);
    s << indent << "coloring_cc_min: ";
    Printer<float>::stream(s, indent + "  ", v.coloring_cc_min);
    s << indent << "coloring_cc_max: ";
    Printer<float>::stream(s, indent + "  ", v.coloring_cc_max);
    s << indent << "discardOutOfElContext: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.discardOutOfElContext);
    s << indent << "disp_processed_pc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disp_processed_pc);
    s << indent << "disp_slam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disp_slam);
    s << indent << "noise_level_db: ";
    Printer<int8_t>::stream(s, indent + "  ", v.noise_level_db);
    s << indent << "selectedAzimuthBin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.selectedAzimuthBin);
    s << indent << "tx_started: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tx_started);
    s << indent << "radar_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.radar_id);
    s << indent << "radar_x_offset: ";
    Printer<float>::stream(s, indent + "  ", v.radar_x_offset);
    s << indent << "radar_y_offset: ";
    Printer<float>::stream(s, indent + "  ", v.radar_y_offset);
    s << indent << "radar_z_offset: ";
    Printer<float>::stream(s, indent + "  ", v.radar_z_offset);
    s << indent << "radar_yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.radar_yaw_angle);
    s << indent << "radar_pitch_angle: ";
    Printer<float>::stream(s, indent + "  ", v.radar_pitch_angle);
    s << indent << "localization_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.localization_active);
    s << indent << "aggregation_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.aggregation_active);
    s << indent << "slam_display: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >::stream(s, indent + "  ", v.slam_display);
    s << indent << "per_radar: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >::stream(s, indent + "  ", v.per_radar);
    s << indent << "color_obj_by_class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_obj_by_class);
    s << indent << "marker_text_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.marker_text_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEGUISETTINGS_H
