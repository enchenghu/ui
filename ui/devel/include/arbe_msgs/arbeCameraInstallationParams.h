// Generated by gencpp from file arbe_msgs/arbeCameraInstallationParams.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBECAMERAINSTALLATIONPARAMS_H
#define ARBE_MSGS_MESSAGE_ARBECAMERAINSTALLATIONPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeCameraInstallationParams_
{
  typedef arbeCameraInstallationParams_<ContainerAllocator> Type;

  arbeCameraInstallationParams_()
    : intrinsic()
    , extrinsic_trans()
    , euler_a_b_g()  {
    }
  arbeCameraInstallationParams_(const ContainerAllocator& _alloc)
    : intrinsic(_alloc)
    , extrinsic_trans(_alloc)
    , euler_a_b_g(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _intrinsic_type;
  _intrinsic_type intrinsic;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _extrinsic_trans_type;
  _extrinsic_trans_type extrinsic_trans;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _euler_a_b_g_type;
  _euler_a_b_g_type euler_a_b_g;





  typedef boost::shared_ptr< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> const> ConstPtr;

}; // struct arbeCameraInstallationParams_

typedef ::arbe_msgs::arbeCameraInstallationParams_<std::allocator<void> > arbeCameraInstallationParams;

typedef boost::shared_ptr< ::arbe_msgs::arbeCameraInstallationParams > arbeCameraInstallationParamsPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeCameraInstallationParams const> arbeCameraInstallationParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator2> & rhs)
{
  return lhs.intrinsic == rhs.intrinsic &&
    lhs.extrinsic_trans == rhs.extrinsic_trans &&
    lhs.euler_a_b_g == rhs.euler_a_b_g;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d1e488e854ebf395d5c87a2670d2622";
  }

  static const char* value(const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d1e488e854ebf39ULL;
  static const uint64_t static_value2 = 0x5d5c87a2670d2622ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeCameraInstallationParams";
  }

  static const char* value(const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] intrinsic\n"
"float32[] extrinsic_trans\n"
"float32[] euler_a_b_g\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.intrinsic);
      stream.next(m.extrinsic_trans);
      stream.next(m.euler_a_b_g);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeCameraInstallationParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeCameraInstallationParams_<ContainerAllocator>& v)
  {
    s << indent << "intrinsic[]" << std::endl;
    for (size_t i = 0; i < v.intrinsic.size(); ++i)
    {
      s << indent << "  intrinsic[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.intrinsic[i]);
    }
    s << indent << "extrinsic_trans[]" << std::endl;
    for (size_t i = 0; i < v.extrinsic_trans.size(); ++i)
    {
      s << indent << "  extrinsic_trans[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.extrinsic_trans[i]);
    }
    s << indent << "euler_a_b_g[]" << std::endl;
    for (size_t i = 0; i < v.euler_a_b_g.size(); ++i)
    {
      s << indent << "  euler_a_b_g[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.euler_a_b_g[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBECAMERAINSTALLATIONPARAMS_H
