// Generated by gencpp from file arbe_msgs/arbeTSlamVelocity.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBETSLAMVELOCITY_H
#define ARBE_MSGS_MESSAGE_ARBETSLAMVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeTSlamVelocity_
{
  typedef arbeTSlamVelocity_<ContainerAllocator> Type;

  arbeTSlamVelocity_()
    : x_dot(0.0)
    , y_dot(0.0)
    , dx_dot(0.0)
    , dy_dot(0.0)  {
    }
  arbeTSlamVelocity_(const ContainerAllocator& _alloc)
    : x_dot(0.0)
    , y_dot(0.0)
    , dx_dot(0.0)
    , dy_dot(0.0)  {
  (void)_alloc;
    }



   typedef float _x_dot_type;
  _x_dot_type x_dot;

   typedef float _y_dot_type;
  _y_dot_type y_dot;

   typedef float _dx_dot_type;
  _dx_dot_type dx_dot;

   typedef float _dy_dot_type;
  _dy_dot_type dy_dot;





  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct arbeTSlamVelocity_

typedef ::arbe_msgs::arbeTSlamVelocity_<std::allocator<void> > arbeTSlamVelocity;

typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamVelocity > arbeTSlamVelocityPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamVelocity const> arbeTSlamVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.x_dot == rhs.x_dot &&
    lhs.y_dot == rhs.y_dot &&
    lhs.dx_dot == rhs.dx_dot &&
    lhs.dy_dot == rhs.dy_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01747869987f0c9150027780a275e95f";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01747869987f0c91ULL;
  static const uint64_t static_value2 = 0x50027780a275e95fULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeTSlamVelocity";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32     x_dot \n"
"float32     y_dot \n"
"float32      dx_dot \n"
"float32      dy_dot \n"
;
  }

  static const char* value(const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_dot);
      stream.next(m.y_dot);
      stream.next(m.dx_dot);
      stream.next(m.dy_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeTSlamVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeTSlamVelocity_<ContainerAllocator>& v)
  {
    s << indent << "x_dot: ";
    Printer<float>::stream(s, indent + "  ", v.x_dot);
    s << indent << "y_dot: ";
    Printer<float>::stream(s, indent + "  ", v.y_dot);
    s << indent << "dx_dot: ";
    Printer<float>::stream(s, indent + "  ", v.dx_dot);
    s << indent << "dy_dot: ";
    Printer<float>::stream(s, indent + "  ", v.dy_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBETSLAMVELOCITY_H
