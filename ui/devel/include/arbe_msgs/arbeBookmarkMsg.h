// Generated by gencpp from file arbe_msgs/arbeBookmarkMsg.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEBOOKMARKMSG_H
#define ARBE_MSGS_MESSAGE_ARBEBOOKMARKMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeBookmarkMsg_
{
  typedef arbeBookmarkMsg_<ContainerAllocator> Type;

  arbeBookmarkMsg_()
    : frame_num(0)
    , egoVel(0.0)  {
    }
  arbeBookmarkMsg_(const ContainerAllocator& _alloc)
    : frame_num(0)
    , egoVel(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _frame_num_type;
  _frame_num_type frame_num;

   typedef float _egoVel_type;
  _egoVel_type egoVel;





  typedef boost::shared_ptr< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> const> ConstPtr;

}; // struct arbeBookmarkMsg_

typedef ::arbe_msgs::arbeBookmarkMsg_<std::allocator<void> > arbeBookmarkMsg;

typedef boost::shared_ptr< ::arbe_msgs::arbeBookmarkMsg > arbeBookmarkMsgPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeBookmarkMsg const> arbeBookmarkMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator2> & rhs)
{
  return lhs.frame_num == rhs.frame_num &&
    lhs.egoVel == rhs.egoVel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "968e0faad3956fde6fdb61e0a1f108a6";
  }

  static const char* value(const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x968e0faad3956fdeULL;
  static const uint64_t static_value2 = 0x6fdb61e0a1f108a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeBookmarkMsg";
  }

  static const char* value(const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 frame_num\n"
"float32 egoVel\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_num);
      stream.next(m.egoVel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeBookmarkMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeBookmarkMsg_<ContainerAllocator>& v)
  {
    s << indent << "frame_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.frame_num);
    s << indent << "egoVel: ";
    Printer<float>::stream(s, indent + "  ", v.egoVel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEBOOKMARKMSG_H
