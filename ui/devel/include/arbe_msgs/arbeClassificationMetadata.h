// Generated by gencpp from file arbe_msgs/arbeClassificationMetadata.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBECLASSIFICATIONMETADATA_H
#define ARBE_MSGS_MESSAGE_ARBECLASSIFICATIONMETADATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeClassificationMetadata_
{
  typedef arbeClassificationMetadata_<ContainerAllocator> Type;

  arbeClassificationMetadata_()
    : enable_tta(false)
    , post_factum_mode(false)
    , average_mode(false)
    , tta_decay(false)
    , tta_momentum(0.0)
    , conf_TH(0.0)  {
    }
  arbeClassificationMetadata_(const ContainerAllocator& _alloc)
    : enable_tta(false)
    , post_factum_mode(false)
    , average_mode(false)
    , tta_decay(false)
    , tta_momentum(0.0)
    , conf_TH(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_tta_type;
  _enable_tta_type enable_tta;

   typedef uint8_t _post_factum_mode_type;
  _post_factum_mode_type post_factum_mode;

   typedef uint8_t _average_mode_type;
  _average_mode_type average_mode;

   typedef uint8_t _tta_decay_type;
  _tta_decay_type tta_decay;

   typedef float _tta_momentum_type;
  _tta_momentum_type tta_momentum;

   typedef float _conf_TH_type;
  _conf_TH_type conf_TH;





  typedef boost::shared_ptr< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> const> ConstPtr;

}; // struct arbeClassificationMetadata_

typedef ::arbe_msgs::arbeClassificationMetadata_<std::allocator<void> > arbeClassificationMetadata;

typedef boost::shared_ptr< ::arbe_msgs::arbeClassificationMetadata > arbeClassificationMetadataPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeClassificationMetadata const> arbeClassificationMetadataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator2> & rhs)
{
  return lhs.enable_tta == rhs.enable_tta &&
    lhs.post_factum_mode == rhs.post_factum_mode &&
    lhs.average_mode == rhs.average_mode &&
    lhs.tta_decay == rhs.tta_decay &&
    lhs.tta_momentum == rhs.tta_momentum &&
    lhs.conf_TH == rhs.conf_TH;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2def84262941647c9070003f42808b6a";
  }

  static const char* value(const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2def84262941647cULL;
  static const uint64_t static_value2 = 0x9070003f42808b6aULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeClassificationMetadata";
  }

  static const char* value(const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable_tta\n"
"bool post_factum_mode\n"
"bool average_mode\n"
"bool tta_decay\n"
"float32 tta_momentum\n"
"float32 conf_TH\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_tta);
      stream.next(m.post_factum_mode);
      stream.next(m.average_mode);
      stream.next(m.tta_decay);
      stream.next(m.tta_momentum);
      stream.next(m.conf_TH);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeClassificationMetadata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator>& v)
  {
    s << indent << "enable_tta: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_tta);
    s << indent << "post_factum_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.post_factum_mode);
    s << indent << "average_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.average_mode);
    s << indent << "tta_decay: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tta_decay);
    s << indent << "tta_momentum: ";
    Printer<float>::stream(s, indent + "  ", v.tta_momentum);
    s << indent << "conf_TH: ";
    Printer<float>::stream(s, indent + "  ", v.conf_TH);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBECLASSIFICATIONMETADATA_H
