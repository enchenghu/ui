// Generated by gencpp from file arbe_msgs/arbePcMetadata.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEPCMETADATA_H
#define ARBE_MSGS_MESSAGE_ARBEPCMETADATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arbe_msgs/arbePcRes.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbePcMetadata_
{
  typedef arbePcMetadata_<ContainerAllocator> Type;

  arbePcMetadata_()
    : PcResolution()
    , range_offset(0.0)
    , range_res_in_db(0.0)
    , azimuth_fft_size(0)
    , elevation_fft_size(0)
    , azimuth_fft_padding(0)
    , elevation_fft_padding(0)  {
    }
  arbePcMetadata_(const ContainerAllocator& _alloc)
    : PcResolution(_alloc)
    , range_offset(0.0)
    , range_res_in_db(0.0)
    , azimuth_fft_size(0)
    , elevation_fft_size(0)
    , azimuth_fft_padding(0)
    , elevation_fft_padding(0)  {
  (void)_alloc;
    }



   typedef  ::arbe_msgs::arbePcRes_<ContainerAllocator>  _PcResolution_type;
  _PcResolution_type PcResolution;

   typedef float _range_offset_type;
  _range_offset_type range_offset;

   typedef float _range_res_in_db_type;
  _range_res_in_db_type range_res_in_db;

   typedef uint32_t _azimuth_fft_size_type;
  _azimuth_fft_size_type azimuth_fft_size;

   typedef uint32_t _elevation_fft_size_type;
  _elevation_fft_size_type elevation_fft_size;

   typedef uint32_t _azimuth_fft_padding_type;
  _azimuth_fft_padding_type azimuth_fft_padding;

   typedef uint32_t _elevation_fft_padding_type;
  _elevation_fft_padding_type elevation_fft_padding;





  typedef boost::shared_ptr< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> const> ConstPtr;

}; // struct arbePcMetadata_

typedef ::arbe_msgs::arbePcMetadata_<std::allocator<void> > arbePcMetadata;

typedef boost::shared_ptr< ::arbe_msgs::arbePcMetadata > arbePcMetadataPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbePcMetadata const> arbePcMetadataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbePcMetadata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbePcMetadata_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbePcMetadata_<ContainerAllocator2> & rhs)
{
  return lhs.PcResolution == rhs.PcResolution &&
    lhs.range_offset == rhs.range_offset &&
    lhs.range_res_in_db == rhs.range_res_in_db &&
    lhs.azimuth_fft_size == rhs.azimuth_fft_size &&
    lhs.elevation_fft_size == rhs.elevation_fft_size &&
    lhs.azimuth_fft_padding == rhs.azimuth_fft_padding &&
    lhs.elevation_fft_padding == rhs.elevation_fft_padding;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbePcMetadata_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbePcMetadata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07014ddb83398e57a7856835fad2cfca";
  }

  static const char* value(const ::arbe_msgs::arbePcMetadata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07014ddb83398e57ULL;
  static const uint64_t static_value2 = 0xa7856835fad2cfcaULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbePcMetadata";
  }

  static const char* value(const ::arbe_msgs::arbePcMetadata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbePcRes PcResolution\n"
"float32 range_offset\n"
"float32 range_res_in_db\n"
"uint32 azimuth_fft_size\n"
"uint32 elevation_fft_size\n"
"uint32 azimuth_fft_padding\n"
"uint32 elevation_fft_padding\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbePcRes\n"
"float32 range_resolution\n"
"float32 doppler_resolution\n"
"float32 azimuth_coefficient\n"
"float32 elevation_coefficient\n"
"\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbePcMetadata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.PcResolution);
      stream.next(m.range_offset);
      stream.next(m.range_res_in_db);
      stream.next(m.azimuth_fft_size);
      stream.next(m.elevation_fft_size);
      stream.next(m.azimuth_fft_padding);
      stream.next(m.elevation_fft_padding);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbePcMetadata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbePcMetadata_<ContainerAllocator>& v)
  {
    s << indent << "PcResolution: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbePcRes_<ContainerAllocator> >::stream(s, indent + "  ", v.PcResolution);
    s << indent << "range_offset: ";
    Printer<float>::stream(s, indent + "  ", v.range_offset);
    s << indent << "range_res_in_db: ";
    Printer<float>::stream(s, indent + "  ", v.range_res_in_db);
    s << indent << "azimuth_fft_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.azimuth_fft_size);
    s << indent << "elevation_fft_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.elevation_fft_size);
    s << indent << "azimuth_fft_padding: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.azimuth_fft_padding);
    s << indent << "elevation_fft_padding: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.elevation_fft_padding);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEPCMETADATA_H
