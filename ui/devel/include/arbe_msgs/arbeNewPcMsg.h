// Generated by gencpp from file arbe_msgs/arbeNewPcMsg.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBENEWPCMSG_H
#define ARBE_MSGS_MESSAGE_ARBENEWPCMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <arbe_msgs/arbePcFrameHeader.h>
#include <arbe_msgs/arbePcMetadata.h>
#include <arbe_msgs/arbePcBins.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeNewPcMsg_
{
  typedef arbeNewPcMsg_<ContainerAllocator> Type;

  arbeNewPcMsg_()
    : RosHeader()
    , PcHeader()
    , PcMetadata()
    , Points()  {
    }
  arbeNewPcMsg_(const ContainerAllocator& _alloc)
    : RosHeader(_alloc)
    , PcHeader(_alloc)
    , PcMetadata(_alloc)
    , Points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _RosHeader_type;
  _RosHeader_type RosHeader;

   typedef  ::arbe_msgs::arbePcFrameHeader_<ContainerAllocator>  _PcHeader_type;
  _PcHeader_type PcHeader;

   typedef  ::arbe_msgs::arbePcMetadata_<ContainerAllocator>  _PcMetadata_type;
  _PcMetadata_type PcMetadata;

   typedef  ::arbe_msgs::arbePcBins_<ContainerAllocator>  _Points_type;
  _Points_type Points;





  typedef boost::shared_ptr< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> const> ConstPtr;

}; // struct arbeNewPcMsg_

typedef ::arbe_msgs::arbeNewPcMsg_<std::allocator<void> > arbeNewPcMsg;

typedef boost::shared_ptr< ::arbe_msgs::arbeNewPcMsg > arbeNewPcMsgPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeNewPcMsg const> arbeNewPcMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator2> & rhs)
{
  return lhs.RosHeader == rhs.RosHeader &&
    lhs.PcHeader == rhs.PcHeader &&
    lhs.PcMetadata == rhs.PcMetadata &&
    lhs.Points == rhs.Points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6537ae358990354b634606bcfb0fa7db";
  }

  static const char* value(const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6537ae358990354bULL;
  static const uint64_t static_value2 = 0x634606bcfb0fa7dbULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeNewPcMsg";
  }

  static const char* value(const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header RosHeader\n"
"arbePcFrameHeader PcHeader\n"
"arbePcMetadata PcMetadata\n"
"arbePcBins Points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbePcFrameHeader\n"
"uint64 time\n"
"uint16 frame_counter\n"
"uint8  is_4d\n"
"uint8  frame_type\n"
"uint16 udp_lost_packages\n"
"uint32 number_of_points\n"
"uint16 crd_count\n"
"arbeFrameTypes frame_types\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeFrameTypes\n"
"uint8 Frame_Type_3d_short = 1\n"
"uint8 Frame_Type_3d_mid = 2\n"
"uint8 Frame_Type_3d_long = 3\n"
"uint8 Frame_Type_3d_ultra_long = 13\n"
"uint8 Frame_Type_4d_short = 4\n"
"uint8 Frame_Type_4d_mid = 5\n"
"uint8 Frame_Type_4d_long = 6\n"
"uint8 Frame_Type_4d_ultra_long = 16\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbePcMetadata\n"
"arbePcRes PcResolution\n"
"float32 range_offset\n"
"float32 range_res_in_db\n"
"uint32 azimuth_fft_size\n"
"uint32 elevation_fft_size\n"
"uint32 azimuth_fft_padding\n"
"uint32 elevation_fft_padding\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbePcRes\n"
"float32 range_resolution\n"
"float32 doppler_resolution\n"
"float32 azimuth_coefficient\n"
"float32 elevation_coefficient\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbePcBins\n"
"uint16[] range_bin\n"
"int16[] doppler_signed_bin\n"
"int8[] azimuth_signed_bin\n"
"int8[] elevation_signed_bin\n"
"int16[] phase\n"
"int16[] power\n"
"\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RosHeader);
      stream.next(m.PcHeader);
      stream.next(m.PcMetadata);
      stream.next(m.Points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeNewPcMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeNewPcMsg_<ContainerAllocator>& v)
  {
    s << indent << "RosHeader: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.RosHeader);
    s << indent << "PcHeader: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbePcFrameHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.PcHeader);
    s << indent << "PcMetadata: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbePcMetadata_<ContainerAllocator> >::stream(s, indent + "  ", v.PcMetadata);
    s << indent << "Points: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbePcBins_<ContainerAllocator> >::stream(s, indent + "  ", v.Points);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBENEWPCMSG_H
