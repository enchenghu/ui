// Generated by gencpp from file arbe_msgs/arbeSlamMsg.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBESLAMMSG_H
#define ARBE_MSGS_MESSAGE_ARBESLAMMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <arbe_msgs/arbeTSlamMetadata.h>
#include <arbe_msgs/arbeTSlamObj.h>
#include <arbe_msgs/arbeFusionClasses.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeSlamMsg_
{
  typedef arbeSlamMsg_<ContainerAllocator> Type;

  arbeSlamMsg_()
    : header()
    , meta_data()
    , ObjectsBuffer()
    , fusionClasses()  {
    }
  arbeSlamMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , meta_data(_alloc)
    , ObjectsBuffer(_alloc)
    , fusionClasses(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator>  _meta_data_type;
  _meta_data_type meta_data;

   typedef std::vector< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >::other >  _ObjectsBuffer_type;
  _ObjectsBuffer_type ObjectsBuffer;

   typedef  ::arbe_msgs::arbeFusionClasses_<ContainerAllocator>  _fusionClasses_type;
  _fusionClasses_type fusionClasses;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FC_BIKE)
  #undef FC_BIKE
#endif
#if defined(_WIN32) && defined(FC_TRUCK_BUS)
  #undef FC_TRUCK_BUS
#endif
#if defined(_WIN32) && defined(FC_VRU)
  #undef FC_VRU
#endif
#if defined(_WIN32) && defined(FC_CAR)
  #undef FC_CAR
#endif
#if defined(_WIN32) && defined(FC_NOT_CLASSIFIED)
  #undef FC_NOT_CLASSIFIED
#endif

  enum {
    FC_BIKE = 0u,
    FC_TRUCK_BUS = 1u,
    FC_VRU = 2u,
    FC_CAR = 3u,
    FC_NOT_CLASSIFIED = 4u,
  };


  typedef boost::shared_ptr< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> const> ConstPtr;

}; // struct arbeSlamMsg_

typedef ::arbe_msgs::arbeSlamMsg_<std::allocator<void> > arbeSlamMsg;

typedef boost::shared_ptr< ::arbe_msgs::arbeSlamMsg > arbeSlamMsgPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeSlamMsg const> arbeSlamMsgConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.meta_data == rhs.meta_data &&
    lhs.ObjectsBuffer == rhs.ObjectsBuffer &&
    lhs.fusionClasses == rhs.fusionClasses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad8727f4b769ffeff212c8a8f681cd8a";
  }

  static const char* value(const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad8727f4b769ffefULL;
  static const uint64_t static_value2 = 0xf212c8a8f681cd8aULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeSlamMsg";
  }

  static const char* value(const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"arbeTSlamMetadata  meta_data\n"
"arbeTSlamObj[] ObjectsBuffer\n"
"\n"
"arbeFusionClasses fusionClasses\n"
"uint16 FC_BIKE = 0\n"
"uint16 FC_TRUCK_BUS = 1\n"
"uint16 FC_VRU = 2\n"
"uint16 FC_CAR = 3\n"
"uint16 FC_NOT_CLASSIFIED = 4\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamMetadata\n"
"uint64  CorresPcTime\n"
"uint16  FrameNumber\n"
"float32 HostHeading\n"
"float32 HostHeadingUnc\n"
"float32 HostVelocity\n"
"float32 HostVelocityUnc\n"
"float32 HostOmega		\n"
"float32 HostOmegaUnc\n"
"uint16  NumberOfObjects\n"
"float32 local_catr_x\n"
"float32 local_catr_y\n"
"bool    location_valid\n"
"bool    is_reset_geo_location\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamObj\n"
"uint16              ID\n"
"uint16              obj_class\n"
"float32             class_conf\n"
"arbeTSlamPos        position\n"
"arbeTSlamVelocity   velocity \n"
"arbeTSlamBox        bounding_box\n"
"uint32              age\n"
"uint16              last_frame_update\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamPos\n"
"float32 x \n"
"float32 y \n"
"float32 z \n"
"float32  dx \n"
"float32  dy \n"
"float32  dz\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamVelocity\n"
"float32     x_dot \n"
"float32     y_dot \n"
"float32      dx_dot \n"
"float32      dy_dot \n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTSlamBox\n"
"float32 scale_x     \n"
"float32 scale_y     \n"
"float32 scale_z     \n"
"float32 scale_x_unc \n"
"float32 scale_y_unc \n"
"float32 scale_z_unc \n"
"float32 orientation_unc  \n"
"float32 orientation  \n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeFusionClasses\n"
"uint16 FC_BIKE = 0\n"
"uint16 FC_TRUCK_BUS = 1\n"
"uint16 FC_VRU = 2\n"
"uint16 FC_CAR = 3\n"
"uint16 FC_NOT_CLASSIFIED = 4\n"
"uint16 NUM_CLASSES = 4\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.meta_data);
      stream.next(m.ObjectsBuffer);
      stream.next(m.fusionClasses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeSlamMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeSlamMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeSlamMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "meta_data: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >::stream(s, indent + "  ", v.meta_data);
    s << indent << "ObjectsBuffer[]" << std::endl;
    for (size_t i = 0; i < v.ObjectsBuffer.size(); ++i)
    {
      s << indent << "  ObjectsBuffer[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arbe_msgs::arbeTSlamObj_<ContainerAllocator> >::stream(s, indent + "    ", v.ObjectsBuffer[i]);
    }
    s << indent << "fusionClasses: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >::stream(s, indent + "  ", v.fusionClasses);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBESLAMMSG_H
