// Generated by gencpp from file arbe_msgs/arbeTSlamMetadata.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBETSLAMMETADATA_H
#define ARBE_MSGS_MESSAGE_ARBETSLAMMETADATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeTSlamMetadata_
{
  typedef arbeTSlamMetadata_<ContainerAllocator> Type;

  arbeTSlamMetadata_()
    : CorresPcTime(0)
    , FrameNumber(0)
    , HostHeading(0.0)
    , HostHeadingUnc(0.0)
    , HostVelocity(0.0)
    , HostVelocityUnc(0.0)
    , HostOmega(0.0)
    , HostOmegaUnc(0.0)
    , NumberOfObjects(0)
    , local_catr_x(0.0)
    , local_catr_y(0.0)
    , location_valid(false)
    , is_reset_geo_location(false)  {
    }
  arbeTSlamMetadata_(const ContainerAllocator& _alloc)
    : CorresPcTime(0)
    , FrameNumber(0)
    , HostHeading(0.0)
    , HostHeadingUnc(0.0)
    , HostVelocity(0.0)
    , HostVelocityUnc(0.0)
    , HostOmega(0.0)
    , HostOmegaUnc(0.0)
    , NumberOfObjects(0)
    , local_catr_x(0.0)
    , local_catr_y(0.0)
    , location_valid(false)
    , is_reset_geo_location(false)  {
  (void)_alloc;
    }



   typedef uint64_t _CorresPcTime_type;
  _CorresPcTime_type CorresPcTime;

   typedef uint16_t _FrameNumber_type;
  _FrameNumber_type FrameNumber;

   typedef float _HostHeading_type;
  _HostHeading_type HostHeading;

   typedef float _HostHeadingUnc_type;
  _HostHeadingUnc_type HostHeadingUnc;

   typedef float _HostVelocity_type;
  _HostVelocity_type HostVelocity;

   typedef float _HostVelocityUnc_type;
  _HostVelocityUnc_type HostVelocityUnc;

   typedef float _HostOmega_type;
  _HostOmega_type HostOmega;

   typedef float _HostOmegaUnc_type;
  _HostOmegaUnc_type HostOmegaUnc;

   typedef uint16_t _NumberOfObjects_type;
  _NumberOfObjects_type NumberOfObjects;

   typedef float _local_catr_x_type;
  _local_catr_x_type local_catr_x;

   typedef float _local_catr_y_type;
  _local_catr_y_type local_catr_y;

   typedef uint8_t _location_valid_type;
  _location_valid_type location_valid;

   typedef uint8_t _is_reset_geo_location_type;
  _is_reset_geo_location_type is_reset_geo_location;





  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> const> ConstPtr;

}; // struct arbeTSlamMetadata_

typedef ::arbe_msgs::arbeTSlamMetadata_<std::allocator<void> > arbeTSlamMetadata;

typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamMetadata > arbeTSlamMetadataPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamMetadata const> arbeTSlamMetadataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator2> & rhs)
{
  return lhs.CorresPcTime == rhs.CorresPcTime &&
    lhs.FrameNumber == rhs.FrameNumber &&
    lhs.HostHeading == rhs.HostHeading &&
    lhs.HostHeadingUnc == rhs.HostHeadingUnc &&
    lhs.HostVelocity == rhs.HostVelocity &&
    lhs.HostVelocityUnc == rhs.HostVelocityUnc &&
    lhs.HostOmega == rhs.HostOmega &&
    lhs.HostOmegaUnc == rhs.HostOmegaUnc &&
    lhs.NumberOfObjects == rhs.NumberOfObjects &&
    lhs.local_catr_x == rhs.local_catr_x &&
    lhs.local_catr_y == rhs.local_catr_y &&
    lhs.location_valid == rhs.location_valid &&
    lhs.is_reset_geo_location == rhs.is_reset_geo_location;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f419d3fbb87f9bdc08e8e38e6a62de8";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f419d3fbb87f9bdULL;
  static const uint64_t static_value2 = 0xc08e8e38e6a62de8ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeTSlamMetadata";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64  CorresPcTime\n"
"uint16  FrameNumber\n"
"float32 HostHeading\n"
"float32 HostHeadingUnc\n"
"float32 HostVelocity\n"
"float32 HostVelocityUnc\n"
"float32 HostOmega		\n"
"float32 HostOmegaUnc\n"
"uint16  NumberOfObjects\n"
"float32 local_catr_x\n"
"float32 local_catr_y\n"
"bool    location_valid\n"
"bool    is_reset_geo_location\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.CorresPcTime);
      stream.next(m.FrameNumber);
      stream.next(m.HostHeading);
      stream.next(m.HostHeadingUnc);
      stream.next(m.HostVelocity);
      stream.next(m.HostVelocityUnc);
      stream.next(m.HostOmega);
      stream.next(m.HostOmegaUnc);
      stream.next(m.NumberOfObjects);
      stream.next(m.local_catr_x);
      stream.next(m.local_catr_y);
      stream.next(m.location_valid);
      stream.next(m.is_reset_geo_location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeTSlamMetadata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeTSlamMetadata_<ContainerAllocator>& v)
  {
    s << indent << "CorresPcTime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.CorresPcTime);
    s << indent << "FrameNumber: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.FrameNumber);
    s << indent << "HostHeading: ";
    Printer<float>::stream(s, indent + "  ", v.HostHeading);
    s << indent << "HostHeadingUnc: ";
    Printer<float>::stream(s, indent + "  ", v.HostHeadingUnc);
    s << indent << "HostVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.HostVelocity);
    s << indent << "HostVelocityUnc: ";
    Printer<float>::stream(s, indent + "  ", v.HostVelocityUnc);
    s << indent << "HostOmega: ";
    Printer<float>::stream(s, indent + "  ", v.HostOmega);
    s << indent << "HostOmegaUnc: ";
    Printer<float>::stream(s, indent + "  ", v.HostOmegaUnc);
    s << indent << "NumberOfObjects: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.NumberOfObjects);
    s << indent << "local_catr_x: ";
    Printer<float>::stream(s, indent + "  ", v.local_catr_x);
    s << indent << "local_catr_y: ";
    Printer<float>::stream(s, indent + "  ", v.local_catr_y);
    s << indent << "location_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.location_valid);
    s << indent << "is_reset_geo_location: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_reset_geo_location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBETSLAMMETADATA_H
