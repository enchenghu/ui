// Generated by gencpp from file arbe_msgs/arbeSettingsPerRadar.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBESETTINGSPERRADAR_H
#define ARBE_MSGS_MESSAGE_ARBESETTINGSPERRADAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeSettingsPerRadar_
{
  typedef arbeSettingsPerRadar_<ContainerAllocator> Type;

  arbeSettingsPerRadar_()
    : n_radars(0)
    , radar_for_text(0)
    , ant_height()
    , ant_pitch()
    , cam_euler_a()
    , cam_euler_b()
    , cam_euler_g()  {
    }
  arbeSettingsPerRadar_(const ContainerAllocator& _alloc)
    : n_radars(0)
    , radar_for_text(0)
    , ant_height(_alloc)
    , ant_pitch(_alloc)
    , cam_euler_a(_alloc)
    , cam_euler_b(_alloc)
    , cam_euler_g(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _n_radars_type;
  _n_radars_type n_radars;

   typedef int8_t _radar_for_text_type;
  _radar_for_text_type radar_for_text;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ant_height_type;
  _ant_height_type ant_height;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ant_pitch_type;
  _ant_pitch_type ant_pitch;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cam_euler_a_type;
  _cam_euler_a_type cam_euler_a;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cam_euler_b_type;
  _cam_euler_b_type cam_euler_b;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cam_euler_g_type;
  _cam_euler_g_type cam_euler_g;





  typedef boost::shared_ptr< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> const> ConstPtr;

}; // struct arbeSettingsPerRadar_

typedef ::arbe_msgs::arbeSettingsPerRadar_<std::allocator<void> > arbeSettingsPerRadar;

typedef boost::shared_ptr< ::arbe_msgs::arbeSettingsPerRadar > arbeSettingsPerRadarPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeSettingsPerRadar const> arbeSettingsPerRadarConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator2> & rhs)
{
  return lhs.n_radars == rhs.n_radars &&
    lhs.radar_for_text == rhs.radar_for_text &&
    lhs.ant_height == rhs.ant_height &&
    lhs.ant_pitch == rhs.ant_pitch &&
    lhs.cam_euler_a == rhs.cam_euler_a &&
    lhs.cam_euler_b == rhs.cam_euler_b &&
    lhs.cam_euler_g == rhs.cam_euler_g;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ee305f5b1c77996631bbad5b0e5663d";
  }

  static const char* value(const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ee305f5b1c77996ULL;
  static const uint64_t static_value2 = 0x631bbad5b0e5663dULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeSettingsPerRadar";
  }

  static const char* value(const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 n_radars\n"
"int8  radar_for_text\n"
"float32[] ant_height\n"
"float32[] ant_pitch\n"
"float32[] cam_euler_a\n"
"float32[] cam_euler_b\n"
"float32[] cam_euler_g\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n_radars);
      stream.next(m.radar_for_text);
      stream.next(m.ant_height);
      stream.next(m.ant_pitch);
      stream.next(m.cam_euler_a);
      stream.next(m.cam_euler_b);
      stream.next(m.cam_euler_g);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeSettingsPerRadar_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeSettingsPerRadar_<ContainerAllocator>& v)
  {
    s << indent << "n_radars: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_radars);
    s << indent << "radar_for_text: ";
    Printer<int8_t>::stream(s, indent + "  ", v.radar_for_text);
    s << indent << "ant_height[]" << std::endl;
    for (size_t i = 0; i < v.ant_height.size(); ++i)
    {
      s << indent << "  ant_height[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ant_height[i]);
    }
    s << indent << "ant_pitch[]" << std::endl;
    for (size_t i = 0; i < v.ant_pitch.size(); ++i)
    {
      s << indent << "  ant_pitch[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ant_pitch[i]);
    }
    s << indent << "cam_euler_a[]" << std::endl;
    for (size_t i = 0; i < v.cam_euler_a.size(); ++i)
    {
      s << indent << "  cam_euler_a[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cam_euler_a[i]);
    }
    s << indent << "cam_euler_b[]" << std::endl;
    for (size_t i = 0; i < v.cam_euler_b.size(); ++i)
    {
      s << indent << "  cam_euler_b[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cam_euler_b[i]);
    }
    s << indent << "cam_euler_g[]" << std::endl;
    for (size_t i = 0; i < v.cam_euler_g.size(); ++i)
    {
      s << indent << "  cam_euler_g[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cam_euler_g[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBESETTINGSPERRADAR_H
