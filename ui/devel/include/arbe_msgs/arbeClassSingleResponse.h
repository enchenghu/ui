// Generated by gencpp from file arbe_msgs/arbeClassSingleResponse.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBECLASSSINGLERESPONSE_H
#define ARBE_MSGS_MESSAGE_ARBECLASSSINGLERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <arbe_msgs/arbeFusionClasses.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeClassSingleResponse_
{
  typedef arbeClassSingleResponse_<ContainerAllocator> Type;

  arbeClassSingleResponse_()
    : valid(false)
    , obj_id(0)
    , obj_index(0)
    , inferredClass(0)
    , conf(0.0)
    , class_str()
    , fusionClasses()
    , tta_scores()
    , tta_count(0)  {
    }
  arbeClassSingleResponse_(const ContainerAllocator& _alloc)
    : valid(false)
    , obj_id(0)
    , obj_index(0)
    , inferredClass(0)
    , conf(0.0)
    , class_str(_alloc)
    , fusionClasses(_alloc)
    , tta_scores(_alloc)
    , tta_count(0)  {
  (void)_alloc;
    }



   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint16_t _obj_id_type;
  _obj_id_type obj_id;

   typedef uint16_t _obj_index_type;
  _obj_index_type obj_index;

   typedef uint8_t _inferredClass_type;
  _inferredClass_type inferredClass;

   typedef float _conf_type;
  _conf_type conf;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _class_str_type;
  _class_str_type class_str;

   typedef  ::arbe_msgs::arbeFusionClasses_<ContainerAllocator>  _fusionClasses_type;
  _fusionClasses_type fusionClasses;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tta_scores_type;
  _tta_scores_type tta_scores;

   typedef uint32_t _tta_count_type;
  _tta_count_type tta_count;





  typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct arbeClassSingleResponse_

typedef ::arbe_msgs::arbeClassSingleResponse_<std::allocator<void> > arbeClassSingleResponse;

typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleResponse > arbeClassSingleResponsePtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeClassSingleResponse const> arbeClassSingleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.valid == rhs.valid &&
    lhs.obj_id == rhs.obj_id &&
    lhs.obj_index == rhs.obj_index &&
    lhs.inferredClass == rhs.inferredClass &&
    lhs.conf == rhs.conf &&
    lhs.class_str == rhs.class_str &&
    lhs.fusionClasses == rhs.fusionClasses &&
    lhs.tta_scores == rhs.tta_scores &&
    lhs.tta_count == rhs.tta_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b400a19f8488a87ab3155d78880124a";
  }

  static const char* value(const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b400a19f8488a87ULL;
  static const uint64_t static_value2 = 0xab3155d78880124aULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeClassSingleResponse";
  }

  static const char* value(const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool valid\n"
"uint16 obj_id\n"
"uint16 obj_index\n"
"uint8 inferredClass\n"
"float32 conf\n"
"string class_str\n"
"arbeFusionClasses fusionClasses\n"
"float32[] tta_scores\n"
"uint32 tta_count\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeFusionClasses\n"
"uint16 FC_BIKE = 0\n"
"uint16 FC_TRUCK_BUS = 1\n"
"uint16 FC_VRU = 2\n"
"uint16 FC_CAR = 3\n"
"uint16 FC_NOT_CLASSIFIED = 4\n"
"uint16 NUM_CLASSES = 4\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valid);
      stream.next(m.obj_id);
      stream.next(m.obj_index);
      stream.next(m.inferredClass);
      stream.next(m.conf);
      stream.next(m.class_str);
      stream.next(m.fusionClasses);
      stream.next(m.tta_scores);
      stream.next(m.tta_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeClassSingleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator>& v)
  {
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "obj_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obj_id);
    s << indent << "obj_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obj_index);
    s << indent << "inferredClass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inferredClass);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "class_str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.class_str);
    s << indent << "fusionClasses: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >::stream(s, indent + "  ", v.fusionClasses);
    s << indent << "tta_scores[]" << std::endl;
    for (size_t i = 0; i < v.tta_scores.size(); ++i)
    {
      s << indent << "  tta_scores[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tta_scores[i]);
    }
    s << indent << "tta_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tta_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBECLASSSINGLERESPONSE_H
