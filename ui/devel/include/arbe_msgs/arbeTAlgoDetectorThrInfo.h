// Generated by gencpp from file arbe_msgs/arbeTAlgoDetectorThrInfo.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBETALGODETECTORTHRINFO_H
#define ARBE_MSGS_MESSAGE_ARBETALGODETECTORTHRINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeTAlgoDetectorThrInfo_
{
  typedef arbeTAlgoDetectorThrInfo_<ContainerAllocator> Type;

  arbeTAlgoDetectorThrInfo_()
    : unFrameNumber(0)
    , eAlgoOutput(0)
    , eThresholdType(0)
    , eFrameType(0)
    , Data()  {
    }
  arbeTAlgoDetectorThrInfo_(const ContainerAllocator& _alloc)
    : unFrameNumber(0)
    , eAlgoOutput(0)
    , eThresholdType(0)
    , eFrameType(0)
    , Data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _unFrameNumber_type;
  _unFrameNumber_type unFrameNumber;

   typedef uint8_t _eAlgoOutput_type;
  _eAlgoOutput_type eAlgoOutput;

   typedef uint8_t _eThresholdType_type;
  _eThresholdType_type eThresholdType;

   typedef uint8_t _eFrameType_type;
  _eFrameType_type eFrameType;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _Data_type;
  _Data_type Data;





  typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> const> ConstPtr;

}; // struct arbeTAlgoDetectorThrInfo_

typedef ::arbe_msgs::arbeTAlgoDetectorThrInfo_<std::allocator<void> > arbeTAlgoDetectorThrInfo;

typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrInfo > arbeTAlgoDetectorThrInfoPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrInfo const> arbeTAlgoDetectorThrInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator2> & rhs)
{
  return lhs.unFrameNumber == rhs.unFrameNumber &&
    lhs.eAlgoOutput == rhs.eAlgoOutput &&
    lhs.eThresholdType == rhs.eThresholdType &&
    lhs.eFrameType == rhs.eFrameType &&
    lhs.Data == rhs.Data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f9f71c2214552c0e7f4ddc765c4621d";
  }

  static const char* value(const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f9f71c2214552c0ULL;
  static const uint64_t static_value2 = 0xe7f4ddc765c4621dULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeTAlgoDetectorThrInfo";
  }

  static const char* value(const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 unFrameNumber\n"
"uint8 eAlgoOutput\n"
"uint8 eThresholdType\n"
"uint8 eFrameType\n"
"uint32[] Data\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unFrameNumber);
      stream.next(m.eAlgoOutput);
      stream.next(m.eThresholdType);
      stream.next(m.eFrameType);
      stream.next(m.Data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeTAlgoDetectorThrInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator>& v)
  {
    s << indent << "unFrameNumber: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.unFrameNumber);
    s << indent << "eAlgoOutput: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eAlgoOutput);
    s << indent << "eThresholdType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eThresholdType);
    s << indent << "eFrameType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.eFrameType);
    s << indent << "Data[]" << std::endl;
    for (size_t i = 0; i < v.Data.size(); ++i)
    {
      s << indent << "  Data[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.Data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBETALGODETECTORTHRINFO_H
