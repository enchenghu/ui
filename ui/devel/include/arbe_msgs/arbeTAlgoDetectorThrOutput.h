// Generated by gencpp from file arbe_msgs/arbeTAlgoDetectorThrOutput.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBETALGODETECTORTHROUTPUT_H
#define ARBE_MSGS_MESSAGE_ARBETALGODETECTORTHROUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <arbe_msgs/arbeTAlgoDetectorThrInfo.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeTAlgoDetectorThrOutput_
{
  typedef arbeTAlgoDetectorThrOutput_<ContainerAllocator> Type;

  arbeTAlgoDetectorThrOutput_()
    : RosHeader()
    , tinfo()  {
    }
  arbeTAlgoDetectorThrOutput_(const ContainerAllocator& _alloc)
    : RosHeader(_alloc)
    , tinfo(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _RosHeader_type;
  _RosHeader_type RosHeader;

   typedef  ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator>  _tinfo_type;
  _tinfo_type tinfo;





  typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> const> ConstPtr;

}; // struct arbeTAlgoDetectorThrOutput_

typedef ::arbe_msgs::arbeTAlgoDetectorThrOutput_<std::allocator<void> > arbeTAlgoDetectorThrOutput;

typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrOutput > arbeTAlgoDetectorThrOutputPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeTAlgoDetectorThrOutput const> arbeTAlgoDetectorThrOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator2> & rhs)
{
  return lhs.RosHeader == rhs.RosHeader &&
    lhs.tinfo == rhs.tinfo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "888d5fc086e6ad00dbaf413f9befa62b";
  }

  static const char* value(const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x888d5fc086e6ad00ULL;
  static const uint64_t static_value2 = 0xdbaf413f9befa62bULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeTAlgoDetectorThrOutput";
  }

  static const char* value(const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header RosHeader\n"
"arbeTAlgoDetectorThrInfo tinfo\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeTAlgoDetectorThrInfo\n"
"uint32 unFrameNumber\n"
"uint8 eAlgoOutput\n"
"uint8 eThresholdType\n"
"uint8 eFrameType\n"
"uint32[] Data\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RosHeader);
      stream.next(m.tinfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeTAlgoDetectorThrOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeTAlgoDetectorThrOutput_<ContainerAllocator>& v)
  {
    s << indent << "RosHeader: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.RosHeader);
    s << indent << "tinfo: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeTAlgoDetectorThrInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.tinfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBETALGODETECTORTHROUTPUT_H
