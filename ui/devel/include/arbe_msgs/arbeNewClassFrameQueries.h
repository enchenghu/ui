// Generated by gencpp from file arbe_msgs/arbeNewClassFrameQueries.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBENEWCLASSFRAMEQUERIES_H
#define ARBE_MSGS_MESSAGE_ARBENEWCLASSFRAMEQUERIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <arbe_msgs/arbeClassificationMetadata.h>
#include <arbe_msgs/arbeClassSingleQuery.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeNewClassFrameQueries_
{
  typedef arbeNewClassFrameQueries_<ContainerAllocator> Type;

  arbeNewClassFrameQueries_()
    : Header()
    , class_metadata()
    , frame_counter(0)
    , queries()
    , mutual_len(0)  {
    }
  arbeNewClassFrameQueries_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , class_metadata(_alloc)
    , frame_counter(0)
    , queries(_alloc)
    , mutual_len(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef  ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator>  _class_metadata_type;
  _class_metadata_type class_metadata;

   typedef uint16_t _frame_counter_type;
  _frame_counter_type frame_counter;

   typedef std::vector< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >::other >  _queries_type;
  _queries_type queries;

   typedef uint16_t _mutual_len_type;
  _mutual_len_type mutual_len;





  typedef boost::shared_ptr< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> const> ConstPtr;

}; // struct arbeNewClassFrameQueries_

typedef ::arbe_msgs::arbeNewClassFrameQueries_<std::allocator<void> > arbeNewClassFrameQueries;

typedef boost::shared_ptr< ::arbe_msgs::arbeNewClassFrameQueries > arbeNewClassFrameQueriesPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeNewClassFrameQueries const> arbeNewClassFrameQueriesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.class_metadata == rhs.class_metadata &&
    lhs.frame_counter == rhs.frame_counter &&
    lhs.queries == rhs.queries &&
    lhs.mutual_len == rhs.mutual_len;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01f7dd27368405062b7c22b947b01851";
  }

  static const char* value(const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01f7dd2736840506ULL;
  static const uint64_t static_value2 = 0x2b7c22b947b01851ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeNewClassFrameQueries";
  }

  static const char* value(const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header Header\n"
"arbeClassificationMetadata class_metadata\n"
"uint16 frame_counter\n"
"arbeClassSingleQuery[] queries\n"
"uint16 mutual_len\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeClassificationMetadata\n"
"bool enable_tta\n"
"bool post_factum_mode\n"
"bool average_mode\n"
"bool tta_decay\n"
"float32 tta_momentum\n"
"float32 conf_TH\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeClassSingleQuery\n"
"uint16 obj_id\n"
"uint16 obj_index\n"
"uint16 n_points\n"
"float32[] xyzvp\n"
"float32[] xyzvp_center\n"
"float32[] tta_scores\n"
"uint32 tta_count\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.class_metadata);
      stream.next(m.frame_counter);
      stream.next(m.queries);
      stream.next(m.mutual_len);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeNewClassFrameQueries_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeNewClassFrameQueries_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "class_metadata: ";
    s << std::endl;
    Printer< ::arbe_msgs::arbeClassificationMetadata_<ContainerAllocator> >::stream(s, indent + "  ", v.class_metadata);
    s << indent << "frame_counter: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.frame_counter);
    s << indent << "queries[]" << std::endl;
    for (size_t i = 0; i < v.queries.size(); ++i)
    {
      s << indent << "  queries[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arbe_msgs::arbeClassSingleQuery_<ContainerAllocator> >::stream(s, indent + "    ", v.queries[i]);
    }
    s << indent << "mutual_len: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mutual_len);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBENEWCLASSFRAMEQUERIES_H
