// Generated by gencpp from file arbe_msgs/arbePcRes.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEPCRES_H
#define ARBE_MSGS_MESSAGE_ARBEPCRES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbePcRes_
{
  typedef arbePcRes_<ContainerAllocator> Type;

  arbePcRes_()
    : range_resolution(0.0)
    , doppler_resolution(0.0)
    , azimuth_coefficient(0.0)
    , elevation_coefficient(0.0)  {
    }
  arbePcRes_(const ContainerAllocator& _alloc)
    : range_resolution(0.0)
    , doppler_resolution(0.0)
    , azimuth_coefficient(0.0)
    , elevation_coefficient(0.0)  {
  (void)_alloc;
    }



   typedef float _range_resolution_type;
  _range_resolution_type range_resolution;

   typedef float _doppler_resolution_type;
  _doppler_resolution_type doppler_resolution;

   typedef float _azimuth_coefficient_type;
  _azimuth_coefficient_type azimuth_coefficient;

   typedef float _elevation_coefficient_type;
  _elevation_coefficient_type elevation_coefficient;





  typedef boost::shared_ptr< ::arbe_msgs::arbePcRes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbePcRes_<ContainerAllocator> const> ConstPtr;

}; // struct arbePcRes_

typedef ::arbe_msgs::arbePcRes_<std::allocator<void> > arbePcRes;

typedef boost::shared_ptr< ::arbe_msgs::arbePcRes > arbePcResPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbePcRes const> arbePcResConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbePcRes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbePcRes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbePcRes_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbePcRes_<ContainerAllocator2> & rhs)
{
  return lhs.range_resolution == rhs.range_resolution &&
    lhs.doppler_resolution == rhs.doppler_resolution &&
    lhs.azimuth_coefficient == rhs.azimuth_coefficient &&
    lhs.elevation_coefficient == rhs.elevation_coefficient;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbePcRes_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbePcRes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbePcRes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbePcRes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbePcRes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84103936b409bd62d8ea8aada9826bd5";
  }

  static const char* value(const ::arbe_msgs::arbePcRes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84103936b409bd62ULL;
  static const uint64_t static_value2 = 0xd8ea8aada9826bd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbePcRes";
  }

  static const char* value(const ::arbe_msgs::arbePcRes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 range_resolution\n"
"float32 doppler_resolution\n"
"float32 azimuth_coefficient\n"
"float32 elevation_coefficient\n"
"\n"
"\n"
;
  }

  static const char* value(const ::arbe_msgs::arbePcRes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range_resolution);
      stream.next(m.doppler_resolution);
      stream.next(m.azimuth_coefficient);
      stream.next(m.elevation_coefficient);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbePcRes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbePcRes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbePcRes_<ContainerAllocator>& v)
  {
    s << indent << "range_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.range_resolution);
    s << indent << "doppler_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.doppler_resolution);
    s << indent << "azimuth_coefficient: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth_coefficient);
    s << indent << "elevation_coefficient: ";
    Printer<float>::stream(s, indent + "  ", v.elevation_coefficient);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEPCRES_H
