// Generated by gencpp from file arbe_msgs/arbeClassFrameResponses.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBECLASSFRAMERESPONSES_H
#define ARBE_MSGS_MESSAGE_ARBECLASSFRAMERESPONSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <arbe_msgs/arbeClassSingleResponse.h>

namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeClassFrameResponses_
{
  typedef arbeClassFrameResponses_<ContainerAllocator> Type;

  arbeClassFrameResponses_()
    : header()
    , frame_counter(0)
    , process_time_ms(0)
    , responses()  {
    }
  arbeClassFrameResponses_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , frame_counter(0)
    , process_time_ms(0)
    , responses(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _frame_counter_type;
  _frame_counter_type frame_counter;

   typedef uint64_t _process_time_ms_type;
  _process_time_ms_type process_time_ms;

   typedef std::vector< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >::other >  _responses_type;
  _responses_type responses;





  typedef boost::shared_ptr< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> const> ConstPtr;

}; // struct arbeClassFrameResponses_

typedef ::arbe_msgs::arbeClassFrameResponses_<std::allocator<void> > arbeClassFrameResponses;

typedef boost::shared_ptr< ::arbe_msgs::arbeClassFrameResponses > arbeClassFrameResponsesPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeClassFrameResponses const> arbeClassFrameResponsesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.frame_counter == rhs.frame_counter &&
    lhs.process_time_ms == rhs.process_time_ms &&
    lhs.responses == rhs.responses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5abc2de3f3441b5705fbb97c192204d4";
  }

  static const char* value(const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5abc2de3f3441b57ULL;
  static const uint64_t static_value2 = 0x05fbb97c192204d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeClassFrameResponses";
  }

  static const char* value(const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"uint16 frame_counter\n"
"uint64 process_time_ms\n"
"arbeClassSingleResponse[] responses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeClassSingleResponse\n"
"bool valid\n"
"uint16 obj_id\n"
"uint16 obj_index\n"
"uint8 inferredClass\n"
"float32 conf\n"
"string class_str\n"
"arbeFusionClasses fusionClasses\n"
"float32[] tta_scores\n"
"uint32 tta_count\n"
"\n"
"================================================================================\n"
"MSG: arbe_msgs/arbeFusionClasses\n"
"uint16 FC_BIKE = 0\n"
"uint16 FC_TRUCK_BUS = 1\n"
"uint16 FC_VRU = 2\n"
"uint16 FC_CAR = 3\n"
"uint16 FC_NOT_CLASSIFIED = 4\n"
"uint16 NUM_CLASSES = 4\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.frame_counter);
      stream.next(m.process_time_ms);
      stream.next(m.responses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeClassFrameResponses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeClassFrameResponses_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frame_counter: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.frame_counter);
    s << indent << "process_time_ms: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.process_time_ms);
    s << indent << "responses[]" << std::endl;
    for (size_t i = 0; i < v.responses.size(); ++i)
    {
      s << indent << "  responses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arbe_msgs::arbeClassSingleResponse_<ContainerAllocator> >::stream(s, indent + "    ", v.responses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBECLASSFRAMERESPONSES_H
