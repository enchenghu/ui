// Generated by gencpp from file arbe_msgs/arbeSlamDisplaySettings.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBESLAMDISPLAYSETTINGS_H
#define ARBE_MSGS_MESSAGE_ARBESLAMDISPLAYSETTINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeSlamDisplaySettings_
{
  typedef arbeSlamDisplaySettings_<ContainerAllocator> Type;

  arbeSlamDisplaySettings_()
    : slam_on_camera(false)
    , disp_dist_on_cam(false)
    , color_by_class(false)
    , show_classification(false)
    , disp_funnel(false)
    , disp_FS_on_cam(false)
    , disp_slam_eco_mode(false)  {
    }
  arbeSlamDisplaySettings_(const ContainerAllocator& _alloc)
    : slam_on_camera(false)
    , disp_dist_on_cam(false)
    , color_by_class(false)
    , show_classification(false)
    , disp_funnel(false)
    , disp_FS_on_cam(false)
    , disp_slam_eco_mode(false)  {
  (void)_alloc;
    }



   typedef uint8_t _slam_on_camera_type;
  _slam_on_camera_type slam_on_camera;

   typedef uint8_t _disp_dist_on_cam_type;
  _disp_dist_on_cam_type disp_dist_on_cam;

   typedef uint8_t _color_by_class_type;
  _color_by_class_type color_by_class;

   typedef uint8_t _show_classification_type;
  _show_classification_type show_classification;

   typedef uint8_t _disp_funnel_type;
  _disp_funnel_type disp_funnel;

   typedef uint8_t _disp_FS_on_cam_type;
  _disp_FS_on_cam_type disp_FS_on_cam;

   typedef uint8_t _disp_slam_eco_mode_type;
  _disp_slam_eco_mode_type disp_slam_eco_mode;





  typedef boost::shared_ptr< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> const> ConstPtr;

}; // struct arbeSlamDisplaySettings_

typedef ::arbe_msgs::arbeSlamDisplaySettings_<std::allocator<void> > arbeSlamDisplaySettings;

typedef boost::shared_ptr< ::arbe_msgs::arbeSlamDisplaySettings > arbeSlamDisplaySettingsPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeSlamDisplaySettings const> arbeSlamDisplaySettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator2> & rhs)
{
  return lhs.slam_on_camera == rhs.slam_on_camera &&
    lhs.disp_dist_on_cam == rhs.disp_dist_on_cam &&
    lhs.color_by_class == rhs.color_by_class &&
    lhs.show_classification == rhs.show_classification &&
    lhs.disp_funnel == rhs.disp_funnel &&
    lhs.disp_FS_on_cam == rhs.disp_FS_on_cam &&
    lhs.disp_slam_eco_mode == rhs.disp_slam_eco_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "137b1eba43f6932882c483d9b1c16de3";
  }

  static const char* value(const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x137b1eba43f69328ULL;
  static const uint64_t static_value2 = 0x82c483d9b1c16de3ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeSlamDisplaySettings";
  }

  static const char* value(const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool slam_on_camera\n"
"bool disp_dist_on_cam\n"
"bool color_by_class\n"
"bool show_classification\n"
"bool disp_funnel\n"
"bool disp_FS_on_cam\n"
"bool disp_slam_eco_mode\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.slam_on_camera);
      stream.next(m.disp_dist_on_cam);
      stream.next(m.color_by_class);
      stream.next(m.show_classification);
      stream.next(m.disp_funnel);
      stream.next(m.disp_FS_on_cam);
      stream.next(m.disp_slam_eco_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeSlamDisplaySettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeSlamDisplaySettings_<ContainerAllocator>& v)
  {
    s << indent << "slam_on_camera: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slam_on_camera);
    s << indent << "disp_dist_on_cam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disp_dist_on_cam);
    s << indent << "color_by_class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color_by_class);
    s << indent << "show_classification: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.show_classification);
    s << indent << "disp_funnel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disp_funnel);
    s << indent << "disp_FS_on_cam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disp_FS_on_cam);
    s << indent << "disp_slam_eco_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disp_slam_eco_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBESLAMDISPLAYSETTINGS_H
