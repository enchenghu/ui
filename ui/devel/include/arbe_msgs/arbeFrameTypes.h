// Generated by gencpp from file arbe_msgs/arbeFrameTypes.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEFRAMETYPES_H
#define ARBE_MSGS_MESSAGE_ARBEFRAMETYPES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeFrameTypes_
{
  typedef arbeFrameTypes_<ContainerAllocator> Type;

  arbeFrameTypes_()
    {
    }
  arbeFrameTypes_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Frame_Type_3d_short)
  #undef Frame_Type_3d_short
#endif
#if defined(_WIN32) && defined(Frame_Type_3d_mid)
  #undef Frame_Type_3d_mid
#endif
#if defined(_WIN32) && defined(Frame_Type_3d_long)
  #undef Frame_Type_3d_long
#endif
#if defined(_WIN32) && defined(Frame_Type_3d_ultra_long)
  #undef Frame_Type_3d_ultra_long
#endif
#if defined(_WIN32) && defined(Frame_Type_4d_short)
  #undef Frame_Type_4d_short
#endif
#if defined(_WIN32) && defined(Frame_Type_4d_mid)
  #undef Frame_Type_4d_mid
#endif
#if defined(_WIN32) && defined(Frame_Type_4d_long)
  #undef Frame_Type_4d_long
#endif
#if defined(_WIN32) && defined(Frame_Type_4d_ultra_long)
  #undef Frame_Type_4d_ultra_long
#endif

  enum {
    Frame_Type_3d_short = 1u,
    Frame_Type_3d_mid = 2u,
    Frame_Type_3d_long = 3u,
    Frame_Type_3d_ultra_long = 13u,
    Frame_Type_4d_short = 4u,
    Frame_Type_4d_mid = 5u,
    Frame_Type_4d_long = 6u,
    Frame_Type_4d_ultra_long = 16u,
  };


  typedef boost::shared_ptr< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> const> ConstPtr;

}; // struct arbeFrameTypes_

typedef ::arbe_msgs::arbeFrameTypes_<std::allocator<void> > arbeFrameTypes;

typedef boost::shared_ptr< ::arbe_msgs::arbeFrameTypes > arbeFrameTypesPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeFrameTypes const> arbeFrameTypesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "60a899865eb222277c4a73fdc879e6e4";
  }

  static const char* value(const ::arbe_msgs::arbeFrameTypes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x60a899865eb22227ULL;
  static const uint64_t static_value2 = 0x7c4a73fdc879e6e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeFrameTypes";
  }

  static const char* value(const ::arbe_msgs::arbeFrameTypes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 Frame_Type_3d_short = 1\n"
"uint8 Frame_Type_3d_mid = 2\n"
"uint8 Frame_Type_3d_long = 3\n"
"uint8 Frame_Type_3d_ultra_long = 13\n"
"uint8 Frame_Type_4d_short = 4\n"
"uint8 Frame_Type_4d_mid = 5\n"
"uint8 Frame_Type_4d_long = 6\n"
"uint8 Frame_Type_4d_ultra_long = 16\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeFrameTypes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeFrameTypes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeFrameTypes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::arbe_msgs::arbeFrameTypes_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEFRAMETYPES_H
