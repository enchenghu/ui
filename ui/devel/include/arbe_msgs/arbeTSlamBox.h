// Generated by gencpp from file arbe_msgs/arbeTSlamBox.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBETSLAMBOX_H
#define ARBE_MSGS_MESSAGE_ARBETSLAMBOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeTSlamBox_
{
  typedef arbeTSlamBox_<ContainerAllocator> Type;

  arbeTSlamBox_()
    : scale_x(0.0)
    , scale_y(0.0)
    , scale_z(0.0)
    , scale_x_unc(0.0)
    , scale_y_unc(0.0)
    , scale_z_unc(0.0)
    , orientation_unc(0.0)
    , orientation(0.0)  {
    }
  arbeTSlamBox_(const ContainerAllocator& _alloc)
    : scale_x(0.0)
    , scale_y(0.0)
    , scale_z(0.0)
    , scale_x_unc(0.0)
    , scale_y_unc(0.0)
    , scale_z_unc(0.0)
    , orientation_unc(0.0)
    , orientation(0.0)  {
  (void)_alloc;
    }



   typedef float _scale_x_type;
  _scale_x_type scale_x;

   typedef float _scale_y_type;
  _scale_y_type scale_y;

   typedef float _scale_z_type;
  _scale_z_type scale_z;

   typedef float _scale_x_unc_type;
  _scale_x_unc_type scale_x_unc;

   typedef float _scale_y_unc_type;
  _scale_y_unc_type scale_y_unc;

   typedef float _scale_z_unc_type;
  _scale_z_unc_type scale_z_unc;

   typedef float _orientation_unc_type;
  _orientation_unc_type orientation_unc;

   typedef float _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> const> ConstPtr;

}; // struct arbeTSlamBox_

typedef ::arbe_msgs::arbeTSlamBox_<std::allocator<void> > arbeTSlamBox;

typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamBox > arbeTSlamBoxPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeTSlamBox const> arbeTSlamBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator2> & rhs)
{
  return lhs.scale_x == rhs.scale_x &&
    lhs.scale_y == rhs.scale_y &&
    lhs.scale_z == rhs.scale_z &&
    lhs.scale_x_unc == rhs.scale_x_unc &&
    lhs.scale_y_unc == rhs.scale_y_unc &&
    lhs.scale_z_unc == rhs.scale_z_unc &&
    lhs.orientation_unc == rhs.orientation_unc &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e36bb424db9b07f679bc8512896c93f7";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe36bb424db9b07f6ULL;
  static const uint64_t static_value2 = 0x79bc8512896c93f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeTSlamBox";
  }

  static const char* value(const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 scale_x     \n"
"float32 scale_y     \n"
"float32 scale_z     \n"
"float32 scale_x_unc \n"
"float32 scale_y_unc \n"
"float32 scale_z_unc \n"
"float32 orientation_unc  \n"
"float32 orientation  \n"
;
  }

  static const char* value(const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scale_x);
      stream.next(m.scale_y);
      stream.next(m.scale_z);
      stream.next(m.scale_x_unc);
      stream.next(m.scale_y_unc);
      stream.next(m.scale_z_unc);
      stream.next(m.orientation_unc);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeTSlamBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeTSlamBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeTSlamBox_<ContainerAllocator>& v)
  {
    s << indent << "scale_x: ";
    Printer<float>::stream(s, indent + "  ", v.scale_x);
    s << indent << "scale_y: ";
    Printer<float>::stream(s, indent + "  ", v.scale_y);
    s << indent << "scale_z: ";
    Printer<float>::stream(s, indent + "  ", v.scale_z);
    s << indent << "scale_x_unc: ";
    Printer<float>::stream(s, indent + "  ", v.scale_x_unc);
    s << indent << "scale_y_unc: ";
    Printer<float>::stream(s, indent + "  ", v.scale_y_unc);
    s << indent << "scale_z_unc: ";
    Printer<float>::stream(s, indent + "  ", v.scale_z_unc);
    s << indent << "orientation_unc: ";
    Printer<float>::stream(s, indent + "  ", v.orientation_unc);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBETSLAMBOX_H
