// Generated by gencpp from file arbe_msgs/arbeDspJobmsg.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEDSPJOBMSG_H
#define ARBE_MSGS_MESSAGE_ARBEDSPJOBMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeDspJobmsg_
{
  typedef arbeDspJobmsg_<ContainerAllocator> Type;

  arbeDspJobmsg_()
    : Header()
    , Info()  {
    }
  arbeDspJobmsg_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , Info(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _Header_type;
  _Header_type Header;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _Info_type;
  _Info_type Info;





  typedef boost::shared_ptr< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> const> ConstPtr;

}; // struct arbeDspJobmsg_

typedef ::arbe_msgs::arbeDspJobmsg_<std::allocator<void> > arbeDspJobmsg;

typedef boost::shared_ptr< ::arbe_msgs::arbeDspJobmsg > arbeDspJobmsgPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeDspJobmsg const> arbeDspJobmsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.Info == rhs.Info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator1> & lhs, const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d95b90f43b0c5ea15e47b0302160dcc";
  }

  static const char* value(const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d95b90f43b0c5eaULL;
  static const uint64_t static_value2 = 0x15e47b0302160dccULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeDspJobmsg";
  }

  static const char* value(const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] Header\n"
"uint8[] Info\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.Info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeDspJobmsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arbe_msgs::arbeDspJobmsg_<ContainerAllocator>& v)
  {
    s << indent << "Header[]" << std::endl;
    for (size_t i = 0; i < v.Header.size(); ++i)
    {
      s << indent << "  Header[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.Header[i]);
    }
    s << indent << "Info[]" << std::endl;
    for (size_t i = 0; i < v.Info.size(); ++i)
    {
      s << indent << "  Info[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.Info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEDSPJOBMSG_H
