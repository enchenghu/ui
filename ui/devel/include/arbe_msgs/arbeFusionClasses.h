// Generated by gencpp from file arbe_msgs/arbeFusionClasses.msg
// DO NOT EDIT!


#ifndef ARBE_MSGS_MESSAGE_ARBEFUSIONCLASSES_H
#define ARBE_MSGS_MESSAGE_ARBEFUSIONCLASSES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arbe_msgs
{
template <class ContainerAllocator>
struct arbeFusionClasses_
{
  typedef arbeFusionClasses_<ContainerAllocator> Type;

  arbeFusionClasses_()
    {
    }
  arbeFusionClasses_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FC_BIKE)
  #undef FC_BIKE
#endif
#if defined(_WIN32) && defined(FC_TRUCK_BUS)
  #undef FC_TRUCK_BUS
#endif
#if defined(_WIN32) && defined(FC_VRU)
  #undef FC_VRU
#endif
#if defined(_WIN32) && defined(FC_CAR)
  #undef FC_CAR
#endif
#if defined(_WIN32) && defined(FC_NOT_CLASSIFIED)
  #undef FC_NOT_CLASSIFIED
#endif
#if defined(_WIN32) && defined(NUM_CLASSES)
  #undef NUM_CLASSES
#endif

  enum {
    FC_BIKE = 0u,
    FC_TRUCK_BUS = 1u,
    FC_VRU = 2u,
    FC_CAR = 3u,
    FC_NOT_CLASSIFIED = 4u,
    NUM_CLASSES = 4u,
  };


  typedef boost::shared_ptr< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> const> ConstPtr;

}; // struct arbeFusionClasses_

typedef ::arbe_msgs::arbeFusionClasses_<std::allocator<void> > arbeFusionClasses;

typedef boost::shared_ptr< ::arbe_msgs::arbeFusionClasses > arbeFusionClassesPtr;
typedef boost::shared_ptr< ::arbe_msgs::arbeFusionClasses const> arbeFusionClassesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace arbe_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c824281429998cf35dc2364ca411d089";
  }

  static const char* value(const ::arbe_msgs::arbeFusionClasses_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc824281429998cf3ULL;
  static const uint64_t static_value2 = 0x5dc2364ca411d089ULL;
};

template<class ContainerAllocator>
struct DataType< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arbe_msgs/arbeFusionClasses";
  }

  static const char* value(const ::arbe_msgs::arbeFusionClasses_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 FC_BIKE = 0\n"
"uint16 FC_TRUCK_BUS = 1\n"
"uint16 FC_VRU = 2\n"
"uint16 FC_CAR = 3\n"
"uint16 FC_NOT_CLASSIFIED = 4\n"
"uint16 NUM_CLASSES = 4\n"
;
  }

  static const char* value(const ::arbe_msgs::arbeFusionClasses_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arbeFusionClasses_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arbe_msgs::arbeFusionClasses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::arbe_msgs::arbeFusionClasses_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ARBE_MSGS_MESSAGE_ARBEFUSIONCLASSES_H
