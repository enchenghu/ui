# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeTSlamObj.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg

class arbeTSlamObj(genpy.Message):
  _md5sum = "1eb101416f9437d15058033f4585fe65"
  _type = "arbe_msgs/arbeTSlamObj"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16              ID
uint16              obj_class
float32             class_conf
arbeTSlamPos        position
arbeTSlamVelocity   velocity 
arbeTSlamBox        bounding_box
uint32              age
uint16              last_frame_update



================================================================================
MSG: arbe_msgs/arbeTSlamPos
float32 x 
float32 y 
float32 z 
float32  dx 
float32  dy 
float32  dz

================================================================================
MSG: arbe_msgs/arbeTSlamVelocity
float32     x_dot 
float32     y_dot 
float32      dx_dot 
float32      dy_dot 

================================================================================
MSG: arbe_msgs/arbeTSlamBox
float32 scale_x     
float32 scale_y     
float32 scale_z     
float32 scale_x_unc 
float32 scale_y_unc 
float32 scale_z_unc 
float32 orientation_unc  
float32 orientation  
"""
  __slots__ = ['ID','obj_class','class_conf','position','velocity','bounding_box','age','last_frame_update']
  _slot_types = ['uint16','uint16','float32','arbe_msgs/arbeTSlamPos','arbe_msgs/arbeTSlamVelocity','arbe_msgs/arbeTSlamBox','uint32','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,obj_class,class_conf,position,velocity,bounding_box,age,last_frame_update

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeTSlamObj, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.obj_class is None:
        self.obj_class = 0
      if self.class_conf is None:
        self.class_conf = 0.
      if self.position is None:
        self.position = arbe_msgs.msg.arbeTSlamPos()
      if self.velocity is None:
        self.velocity = arbe_msgs.msg.arbeTSlamVelocity()
      if self.bounding_box is None:
        self.bounding_box = arbe_msgs.msg.arbeTSlamBox()
      if self.age is None:
        self.age = 0
      if self.last_frame_update is None:
        self.last_frame_update = 0
    else:
      self.ID = 0
      self.obj_class = 0
      self.class_conf = 0.
      self.position = arbe_msgs.msg.arbeTSlamPos()
      self.velocity = arbe_msgs.msg.arbeTSlamVelocity()
      self.bounding_box = arbe_msgs.msg.arbeTSlamBox()
      self.age = 0
      self.last_frame_update = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2H19fIH().pack(_x.ID, _x.obj_class, _x.class_conf, _x.position.x, _x.position.y, _x.position.z, _x.position.dx, _x.position.dy, _x.position.dz, _x.velocity.x_dot, _x.velocity.y_dot, _x.velocity.dx_dot, _x.velocity.dy_dot, _x.bounding_box.scale_x, _x.bounding_box.scale_y, _x.bounding_box.scale_z, _x.bounding_box.scale_x_unc, _x.bounding_box.scale_y_unc, _x.bounding_box.scale_z_unc, _x.bounding_box.orientation_unc, _x.bounding_box.orientation, _x.age, _x.last_frame_update))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = arbe_msgs.msg.arbeTSlamPos()
      if self.velocity is None:
        self.velocity = arbe_msgs.msg.arbeTSlamVelocity()
      if self.bounding_box is None:
        self.bounding_box = arbe_msgs.msg.arbeTSlamBox()
      end = 0
      _x = self
      start = end
      end += 86
      (_x.ID, _x.obj_class, _x.class_conf, _x.position.x, _x.position.y, _x.position.z, _x.position.dx, _x.position.dy, _x.position.dz, _x.velocity.x_dot, _x.velocity.y_dot, _x.velocity.dx_dot, _x.velocity.dy_dot, _x.bounding_box.scale_x, _x.bounding_box.scale_y, _x.bounding_box.scale_z, _x.bounding_box.scale_x_unc, _x.bounding_box.scale_y_unc, _x.bounding_box.scale_z_unc, _x.bounding_box.orientation_unc, _x.bounding_box.orientation, _x.age, _x.last_frame_update,) = _get_struct_2H19fIH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2H19fIH().pack(_x.ID, _x.obj_class, _x.class_conf, _x.position.x, _x.position.y, _x.position.z, _x.position.dx, _x.position.dy, _x.position.dz, _x.velocity.x_dot, _x.velocity.y_dot, _x.velocity.dx_dot, _x.velocity.dy_dot, _x.bounding_box.scale_x, _x.bounding_box.scale_y, _x.bounding_box.scale_z, _x.bounding_box.scale_x_unc, _x.bounding_box.scale_y_unc, _x.bounding_box.scale_z_unc, _x.bounding_box.orientation_unc, _x.bounding_box.orientation, _x.age, _x.last_frame_update))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = arbe_msgs.msg.arbeTSlamPos()
      if self.velocity is None:
        self.velocity = arbe_msgs.msg.arbeTSlamVelocity()
      if self.bounding_box is None:
        self.bounding_box = arbe_msgs.msg.arbeTSlamBox()
      end = 0
      _x = self
      start = end
      end += 86
      (_x.ID, _x.obj_class, _x.class_conf, _x.position.x, _x.position.y, _x.position.z, _x.position.dx, _x.position.dy, _x.position.dz, _x.velocity.x_dot, _x.velocity.y_dot, _x.velocity.dx_dot, _x.velocity.dy_dot, _x.bounding_box.scale_x, _x.bounding_box.scale_y, _x.bounding_box.scale_z, _x.bounding_box.scale_x_unc, _x.bounding_box.scale_y_unc, _x.bounding_box.scale_z_unc, _x.bounding_box.orientation_unc, _x.bounding_box.orientation, _x.age, _x.last_frame_update,) = _get_struct_2H19fIH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H19fIH = None
def _get_struct_2H19fIH():
    global _struct_2H19fIH
    if _struct_2H19fIH is None:
        _struct_2H19fIH = struct.Struct("<2H19fIH")
    return _struct_2H19fIH
