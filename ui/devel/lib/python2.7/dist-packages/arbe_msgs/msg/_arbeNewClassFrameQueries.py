# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeNewClassFrameQueries.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg
import std_msgs.msg

class arbeNewClassFrameQueries(genpy.Message):
  _md5sum = "01f7dd27368405062b7c22b947b01851"
  _type = "arbe_msgs/arbeNewClassFrameQueries"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header Header
arbeClassificationMetadata class_metadata
uint16 frame_counter
arbeClassSingleQuery[] queries
uint16 mutual_len


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: arbe_msgs/arbeClassificationMetadata
bool enable_tta
bool post_factum_mode
bool average_mode
bool tta_decay
float32 tta_momentum
float32 conf_TH

================================================================================
MSG: arbe_msgs/arbeClassSingleQuery
uint16 obj_id
uint16 obj_index
uint16 n_points
float32[] xyzvp
float32[] xyzvp_center
float32[] tta_scores
uint32 tta_count

"""
  __slots__ = ['Header','class_metadata','frame_counter','queries','mutual_len']
  _slot_types = ['std_msgs/Header','arbe_msgs/arbeClassificationMetadata','uint16','arbe_msgs/arbeClassSingleQuery[]','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Header,class_metadata,frame_counter,queries,mutual_len

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeNewClassFrameQueries, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.class_metadata is None:
        self.class_metadata = arbe_msgs.msg.arbeClassificationMetadata()
      if self.frame_counter is None:
        self.frame_counter = 0
      if self.queries is None:
        self.queries = []
      if self.mutual_len is None:
        self.mutual_len = 0
    else:
      self.Header = std_msgs.msg.Header()
      self.class_metadata = arbe_msgs.msg.arbeClassificationMetadata()
      self.frame_counter = 0
      self.queries = []
      self.mutual_len = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B2fH().pack(_x.class_metadata.enable_tta, _x.class_metadata.post_factum_mode, _x.class_metadata.average_mode, _x.class_metadata.tta_decay, _x.class_metadata.tta_momentum, _x.class_metadata.conf_TH, _x.frame_counter))
      length = len(self.queries)
      buff.write(_struct_I.pack(length))
      for val1 in self.queries:
        _x = val1
        buff.write(_get_struct_3H().pack(_x.obj_id, _x.obj_index, _x.n_points))
        length = len(val1.xyzvp)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.xyzvp))
        length = len(val1.xyzvp_center)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.xyzvp_center))
        length = len(val1.tta_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.tta_scores))
        _x = val1.tta_count
        buff.write(_get_struct_I().pack(_x))
      _x = self.mutual_len
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.class_metadata is None:
        self.class_metadata = arbe_msgs.msg.arbeClassificationMetadata()
      if self.queries is None:
        self.queries = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.class_metadata.enable_tta, _x.class_metadata.post_factum_mode, _x.class_metadata.average_mode, _x.class_metadata.tta_decay, _x.class_metadata.tta_momentum, _x.class_metadata.conf_TH, _x.frame_counter,) = _get_struct_4B2fH().unpack(str[start:end])
      self.class_metadata.enable_tta = bool(self.class_metadata.enable_tta)
      self.class_metadata.post_factum_mode = bool(self.class_metadata.post_factum_mode)
      self.class_metadata.average_mode = bool(self.class_metadata.average_mode)
      self.class_metadata.tta_decay = bool(self.class_metadata.tta_decay)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.queries = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeClassSingleQuery()
        _x = val1
        start = end
        end += 6
        (_x.obj_id, _x.obj_index, _x.n_points,) = _get_struct_3H().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.xyzvp = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.xyzvp_center = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tta_scores = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.tta_count,) = _get_struct_I().unpack(str[start:end])
        self.queries.append(val1)
      start = end
      end += 2
      (self.mutual_len,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B2fH().pack(_x.class_metadata.enable_tta, _x.class_metadata.post_factum_mode, _x.class_metadata.average_mode, _x.class_metadata.tta_decay, _x.class_metadata.tta_momentum, _x.class_metadata.conf_TH, _x.frame_counter))
      length = len(self.queries)
      buff.write(_struct_I.pack(length))
      for val1 in self.queries:
        _x = val1
        buff.write(_get_struct_3H().pack(_x.obj_id, _x.obj_index, _x.n_points))
        length = len(val1.xyzvp)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.xyzvp.tostring())
        length = len(val1.xyzvp_center)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.xyzvp_center.tostring())
        length = len(val1.tta_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.tta_scores.tostring())
        _x = val1.tta_count
        buff.write(_get_struct_I().pack(_x))
      _x = self.mutual_len
      buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.class_metadata is None:
        self.class_metadata = arbe_msgs.msg.arbeClassificationMetadata()
      if self.queries is None:
        self.queries = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.class_metadata.enable_tta, _x.class_metadata.post_factum_mode, _x.class_metadata.average_mode, _x.class_metadata.tta_decay, _x.class_metadata.tta_momentum, _x.class_metadata.conf_TH, _x.frame_counter,) = _get_struct_4B2fH().unpack(str[start:end])
      self.class_metadata.enable_tta = bool(self.class_metadata.enable_tta)
      self.class_metadata.post_factum_mode = bool(self.class_metadata.post_factum_mode)
      self.class_metadata.average_mode = bool(self.class_metadata.average_mode)
      self.class_metadata.tta_decay = bool(self.class_metadata.tta_decay)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.queries = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeClassSingleQuery()
        _x = val1
        start = end
        end += 6
        (_x.obj_id, _x.obj_index, _x.n_points,) = _get_struct_3H().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.xyzvp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.xyzvp_center = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tta_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.tta_count,) = _get_struct_I().unpack(str[start:end])
        self.queries.append(val1)
      start = end
      end += 2
      (self.mutual_len,) = _get_struct_H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3H = None
def _get_struct_3H():
    global _struct_3H
    if _struct_3H is None:
        _struct_3H = struct.Struct("<3H")
    return _struct_3H
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B2fH = None
def _get_struct_4B2fH():
    global _struct_4B2fH
    if _struct_4B2fH is None:
        _struct_4B2fH = struct.Struct("<4B2fH")
    return _struct_4B2fH
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
