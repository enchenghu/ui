# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeClassFrameResponses.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg
import std_msgs.msg

class arbeClassFrameResponses(genpy.Message):
  _md5sum = "5abc2de3f3441b5705fbb97c192204d4"
  _type = "arbe_msgs/arbeClassFrameResponses"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint16 frame_counter
uint64 process_time_ms
arbeClassSingleResponse[] responses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: arbe_msgs/arbeClassSingleResponse
bool valid
uint16 obj_id
uint16 obj_index
uint8 inferredClass
float32 conf
string class_str
arbeFusionClasses fusionClasses
float32[] tta_scores
uint32 tta_count

================================================================================
MSG: arbe_msgs/arbeFusionClasses
uint16 FC_BIKE = 0
uint16 FC_TRUCK_BUS = 1
uint16 FC_VRU = 2
uint16 FC_CAR = 3
uint16 FC_NOT_CLASSIFIED = 4
uint16 NUM_CLASSES = 4
"""
  __slots__ = ['header','frame_counter','process_time_ms','responses']
  _slot_types = ['std_msgs/Header','uint16','uint64','arbe_msgs/arbeClassSingleResponse[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,frame_counter,process_time_ms,responses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeClassFrameResponses, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.frame_counter is None:
        self.frame_counter = 0
      if self.process_time_ms is None:
        self.process_time_ms = 0
      if self.responses is None:
        self.responses = []
    else:
      self.header = std_msgs.msg.Header()
      self.frame_counter = 0
      self.process_time_ms = 0
      self.responses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HQ().pack(_x.frame_counter, _x.process_time_ms))
      length = len(self.responses)
      buff.write(_struct_I.pack(length))
      for val1 in self.responses:
        _x = val1
        buff.write(_get_struct_B2HBf().pack(_x.valid, _x.obj_id, _x.obj_index, _x.inferredClass, _x.conf))
        _x = val1.class_str
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.fusionClasses
        pass
        length = len(val1.tta_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.tta_scores))
        _x = val1.tta_count
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.responses is None:
        self.responses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.frame_counter, _x.process_time_ms,) = _get_struct_HQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.responses = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeClassSingleResponse()
        _x = val1
        start = end
        end += 10
        (_x.valid, _x.obj_id, _x.obj_index, _x.inferredClass, _x.conf,) = _get_struct_B2HBf().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_str = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_str = str[start:end]
        _v2 = val1.fusionClasses
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tta_scores = s.unpack(str[start:end])
        start = end
        end += 4
        (val1.tta_count,) = _get_struct_I().unpack(str[start:end])
        self.responses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HQ().pack(_x.frame_counter, _x.process_time_ms))
      length = len(self.responses)
      buff.write(_struct_I.pack(length))
      for val1 in self.responses:
        _x = val1
        buff.write(_get_struct_B2HBf().pack(_x.valid, _x.obj_id, _x.obj_index, _x.inferredClass, _x.conf))
        _x = val1.class_str
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.fusionClasses
        pass
        length = len(val1.tta_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.tta_scores.tostring())
        _x = val1.tta_count
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.responses is None:
        self.responses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.frame_counter, _x.process_time_ms,) = _get_struct_HQ().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.responses = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeClassSingleResponse()
        _x = val1
        start = end
        end += 10
        (_x.valid, _x.obj_id, _x.obj_index, _x.inferredClass, _x.conf,) = _get_struct_B2HBf().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_str = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_str = str[start:end]
        _v4 = val1.fusionClasses
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tta_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (val1.tta_count,) = _get_struct_I().unpack(str[start:end])
        self.responses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2HBf = None
def _get_struct_B2HBf():
    global _struct_B2HBf
    if _struct_B2HBf is None:
        _struct_B2HBf = struct.Struct("<B2HBf")
    return _struct_B2HBf
_struct_HQ = None
def _get_struct_HQ():
    global _struct_HQ
    if _struct_HQ is None:
        _struct_HQ = struct.Struct("<HQ")
    return _struct_HQ
