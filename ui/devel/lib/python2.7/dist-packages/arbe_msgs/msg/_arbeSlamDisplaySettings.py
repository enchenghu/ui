# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeSlamDisplaySettings.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class arbeSlamDisplaySettings(genpy.Message):
  _md5sum = "137b1eba43f6932882c483d9b1c16de3"
  _type = "arbe_msgs/arbeSlamDisplaySettings"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool slam_on_camera
bool disp_dist_on_cam
bool color_by_class
bool show_classification
bool disp_funnel
bool disp_FS_on_cam
bool disp_slam_eco_mode
"""
  __slots__ = ['slam_on_camera','disp_dist_on_cam','color_by_class','show_classification','disp_funnel','disp_FS_on_cam','disp_slam_eco_mode']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       slam_on_camera,disp_dist_on_cam,color_by_class,show_classification,disp_funnel,disp_FS_on_cam,disp_slam_eco_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeSlamDisplaySettings, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.slam_on_camera is None:
        self.slam_on_camera = False
      if self.disp_dist_on_cam is None:
        self.disp_dist_on_cam = False
      if self.color_by_class is None:
        self.color_by_class = False
      if self.show_classification is None:
        self.show_classification = False
      if self.disp_funnel is None:
        self.disp_funnel = False
      if self.disp_FS_on_cam is None:
        self.disp_FS_on_cam = False
      if self.disp_slam_eco_mode is None:
        self.disp_slam_eco_mode = False
    else:
      self.slam_on_camera = False
      self.disp_dist_on_cam = False
      self.color_by_class = False
      self.show_classification = False
      self.disp_funnel = False
      self.disp_FS_on_cam = False
      self.disp_slam_eco_mode = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.slam_on_camera, _x.disp_dist_on_cam, _x.color_by_class, _x.show_classification, _x.disp_funnel, _x.disp_FS_on_cam, _x.disp_slam_eco_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.slam_on_camera, _x.disp_dist_on_cam, _x.color_by_class, _x.show_classification, _x.disp_funnel, _x.disp_FS_on_cam, _x.disp_slam_eco_mode,) = _get_struct_7B().unpack(str[start:end])
      self.slam_on_camera = bool(self.slam_on_camera)
      self.disp_dist_on_cam = bool(self.disp_dist_on_cam)
      self.color_by_class = bool(self.color_by_class)
      self.show_classification = bool(self.show_classification)
      self.disp_funnel = bool(self.disp_funnel)
      self.disp_FS_on_cam = bool(self.disp_FS_on_cam)
      self.disp_slam_eco_mode = bool(self.disp_slam_eco_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.slam_on_camera, _x.disp_dist_on_cam, _x.color_by_class, _x.show_classification, _x.disp_funnel, _x.disp_FS_on_cam, _x.disp_slam_eco_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.slam_on_camera, _x.disp_dist_on_cam, _x.color_by_class, _x.show_classification, _x.disp_funnel, _x.disp_FS_on_cam, _x.disp_slam_eco_mode,) = _get_struct_7B().unpack(str[start:end])
      self.slam_on_camera = bool(self.slam_on_camera)
      self.disp_dist_on_cam = bool(self.disp_dist_on_cam)
      self.color_by_class = bool(self.color_by_class)
      self.show_classification = bool(self.show_classification)
      self.disp_funnel = bool(self.disp_funnel)
      self.disp_FS_on_cam = bool(self.disp_FS_on_cam)
      self.disp_slam_eco_mode = bool(self.disp_slam_eco_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
