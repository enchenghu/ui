# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeNewPcMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg
import std_msgs.msg

class arbeNewPcMsg(genpy.Message):
  _md5sum = "6537ae358990354b634606bcfb0fa7db"
  _type = "arbe_msgs/arbeNewPcMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header RosHeader
arbePcFrameHeader PcHeader
arbePcMetadata PcMetadata
arbePcBins Points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: arbe_msgs/arbePcFrameHeader
uint64 time
uint16 frame_counter
uint8  is_4d
uint8  frame_type
uint16 udp_lost_packages
uint32 number_of_points
uint16 crd_count
arbeFrameTypes frame_types

================================================================================
MSG: arbe_msgs/arbeFrameTypes
uint8 Frame_Type_3d_short = 1
uint8 Frame_Type_3d_mid = 2
uint8 Frame_Type_3d_long = 3
uint8 Frame_Type_3d_ultra_long = 13
uint8 Frame_Type_4d_short = 4
uint8 Frame_Type_4d_mid = 5
uint8 Frame_Type_4d_long = 6
uint8 Frame_Type_4d_ultra_long = 16

================================================================================
MSG: arbe_msgs/arbePcMetadata
arbePcRes PcResolution
float32 range_offset
float32 range_res_in_db
uint32 azimuth_fft_size
uint32 elevation_fft_size
uint32 azimuth_fft_padding
uint32 elevation_fft_padding


================================================================================
MSG: arbe_msgs/arbePcRes
float32 range_resolution
float32 doppler_resolution
float32 azimuth_coefficient
float32 elevation_coefficient



================================================================================
MSG: arbe_msgs/arbePcBins
uint16[] range_bin
int16[] doppler_signed_bin
int8[] azimuth_signed_bin
int8[] elevation_signed_bin
int16[] phase
int16[] power


"""
  __slots__ = ['RosHeader','PcHeader','PcMetadata','Points']
  _slot_types = ['std_msgs/Header','arbe_msgs/arbePcFrameHeader','arbe_msgs/arbePcMetadata','arbe_msgs/arbePcBins']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RosHeader,PcHeader,PcMetadata,Points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeNewPcMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.RosHeader is None:
        self.RosHeader = std_msgs.msg.Header()
      if self.PcHeader is None:
        self.PcHeader = arbe_msgs.msg.arbePcFrameHeader()
      if self.PcMetadata is None:
        self.PcMetadata = arbe_msgs.msg.arbePcMetadata()
      if self.Points is None:
        self.Points = arbe_msgs.msg.arbePcBins()
    else:
      self.RosHeader = std_msgs.msg.Header()
      self.PcHeader = arbe_msgs.msg.arbePcFrameHeader()
      self.PcMetadata = arbe_msgs.msg.arbePcMetadata()
      self.Points = arbe_msgs.msg.arbePcBins()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.RosHeader.seq, _x.RosHeader.stamp.secs, _x.RosHeader.stamp.nsecs))
      _x = self.RosHeader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QH2BHIH6f4I().pack(_x.PcHeader.time, _x.PcHeader.frame_counter, _x.PcHeader.is_4d, _x.PcHeader.frame_type, _x.PcHeader.udp_lost_packages, _x.PcHeader.number_of_points, _x.PcHeader.crd_count, _x.PcMetadata.PcResolution.range_resolution, _x.PcMetadata.PcResolution.doppler_resolution, _x.PcMetadata.PcResolution.azimuth_coefficient, _x.PcMetadata.PcResolution.elevation_coefficient, _x.PcMetadata.range_offset, _x.PcMetadata.range_res_in_db, _x.PcMetadata.azimuth_fft_size, _x.PcMetadata.elevation_fft_size, _x.PcMetadata.azimuth_fft_padding, _x.PcMetadata.elevation_fft_padding))
      length = len(self.Points.range_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.Points.range_bin))
      length = len(self.Points.doppler_signed_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.Points.doppler_signed_bin))
      length = len(self.Points.azimuth_signed_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.Points.azimuth_signed_bin))
      length = len(self.Points.elevation_signed_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.Points.elevation_signed_bin))
      length = len(self.Points.phase)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.Points.phase))
      length = len(self.Points.power)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.Points.power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.RosHeader is None:
        self.RosHeader = std_msgs.msg.Header()
      if self.PcHeader is None:
        self.PcHeader = arbe_msgs.msg.arbePcFrameHeader()
      if self.PcMetadata is None:
        self.PcMetadata = arbe_msgs.msg.arbePcMetadata()
      if self.Points is None:
        self.Points = arbe_msgs.msg.arbePcBins()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.RosHeader.seq, _x.RosHeader.stamp.secs, _x.RosHeader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RosHeader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.RosHeader.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.PcHeader.time, _x.PcHeader.frame_counter, _x.PcHeader.is_4d, _x.PcHeader.frame_type, _x.PcHeader.udp_lost_packages, _x.PcHeader.number_of_points, _x.PcHeader.crd_count, _x.PcMetadata.PcResolution.range_resolution, _x.PcMetadata.PcResolution.doppler_resolution, _x.PcMetadata.PcResolution.azimuth_coefficient, _x.PcMetadata.PcResolution.elevation_coefficient, _x.PcMetadata.range_offset, _x.PcMetadata.range_res_in_db, _x.PcMetadata.azimuth_fft_size, _x.PcMetadata.elevation_fft_size, _x.PcMetadata.azimuth_fft_padding, _x.PcMetadata.elevation_fft_padding,) = _get_struct_QH2BHIH6f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.range_bin = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.doppler_signed_bin = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.azimuth_signed_bin = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.elevation_signed_bin = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.phase = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.power = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.RosHeader.seq, _x.RosHeader.stamp.secs, _x.RosHeader.stamp.nsecs))
      _x = self.RosHeader.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QH2BHIH6f4I().pack(_x.PcHeader.time, _x.PcHeader.frame_counter, _x.PcHeader.is_4d, _x.PcHeader.frame_type, _x.PcHeader.udp_lost_packages, _x.PcHeader.number_of_points, _x.PcHeader.crd_count, _x.PcMetadata.PcResolution.range_resolution, _x.PcMetadata.PcResolution.doppler_resolution, _x.PcMetadata.PcResolution.azimuth_coefficient, _x.PcMetadata.PcResolution.elevation_coefficient, _x.PcMetadata.range_offset, _x.PcMetadata.range_res_in_db, _x.PcMetadata.azimuth_fft_size, _x.PcMetadata.elevation_fft_size, _x.PcMetadata.azimuth_fft_padding, _x.PcMetadata.elevation_fft_padding))
      length = len(self.Points.range_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.Points.range_bin.tostring())
      length = len(self.Points.doppler_signed_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.Points.doppler_signed_bin.tostring())
      length = len(self.Points.azimuth_signed_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.Points.azimuth_signed_bin.tostring())
      length = len(self.Points.elevation_signed_bin)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.Points.elevation_signed_bin.tostring())
      length = len(self.Points.phase)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.Points.phase.tostring())
      length = len(self.Points.power)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.Points.power.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.RosHeader is None:
        self.RosHeader = std_msgs.msg.Header()
      if self.PcHeader is None:
        self.PcHeader = arbe_msgs.msg.arbePcFrameHeader()
      if self.PcMetadata is None:
        self.PcMetadata = arbe_msgs.msg.arbePcMetadata()
      if self.Points is None:
        self.Points = arbe_msgs.msg.arbePcBins()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.RosHeader.seq, _x.RosHeader.stamp.secs, _x.RosHeader.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.RosHeader.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.RosHeader.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.PcHeader.time, _x.PcHeader.frame_counter, _x.PcHeader.is_4d, _x.PcHeader.frame_type, _x.PcHeader.udp_lost_packages, _x.PcHeader.number_of_points, _x.PcHeader.crd_count, _x.PcMetadata.PcResolution.range_resolution, _x.PcMetadata.PcResolution.doppler_resolution, _x.PcMetadata.PcResolution.azimuth_coefficient, _x.PcMetadata.PcResolution.elevation_coefficient, _x.PcMetadata.range_offset, _x.PcMetadata.range_res_in_db, _x.PcMetadata.azimuth_fft_size, _x.PcMetadata.elevation_fft_size, _x.PcMetadata.azimuth_fft_padding, _x.PcMetadata.elevation_fft_padding,) = _get_struct_QH2BHIH6f4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.range_bin = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.doppler_signed_bin = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.azimuth_signed_bin = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.elevation_signed_bin = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.phase = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Points.power = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_QH2BHIH6f4I = None
def _get_struct_QH2BHIH6f4I():
    global _struct_QH2BHIH6f4I
    if _struct_QH2BHIH6f4I is None:
        _struct_QH2BHIH6f4I = struct.Struct("<QH2BHIH6f4I")
    return _struct_QH2BHIH6f4I
