# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeClassSingleQuery.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class arbeClassSingleQuery(genpy.Message):
  _md5sum = "64f8fe3f54997e174c21d53624f859dd"
  _type = "arbe_msgs/arbeClassSingleQuery"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 obj_id
uint16 obj_index
uint16 n_points
float32[] xyzvp
float32[] xyzvp_center
float32[] tta_scores
uint32 tta_count

"""
  __slots__ = ['obj_id','obj_index','n_points','xyzvp','xyzvp_center','tta_scores','tta_count']
  _slot_types = ['uint16','uint16','uint16','float32[]','float32[]','float32[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obj_id,obj_index,n_points,xyzvp,xyzvp_center,tta_scores,tta_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeClassSingleQuery, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obj_id is None:
        self.obj_id = 0
      if self.obj_index is None:
        self.obj_index = 0
      if self.n_points is None:
        self.n_points = 0
      if self.xyzvp is None:
        self.xyzvp = []
      if self.xyzvp_center is None:
        self.xyzvp_center = []
      if self.tta_scores is None:
        self.tta_scores = []
      if self.tta_count is None:
        self.tta_count = 0
    else:
      self.obj_id = 0
      self.obj_index = 0
      self.n_points = 0
      self.xyzvp = []
      self.xyzvp_center = []
      self.tta_scores = []
      self.tta_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3H().pack(_x.obj_id, _x.obj_index, _x.n_points))
      length = len(self.xyzvp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.xyzvp))
      length = len(self.xyzvp_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.xyzvp_center))
      length = len(self.tta_scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.tta_scores))
      _x = self.tta_count
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.obj_id, _x.obj_index, _x.n_points,) = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xyzvp = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xyzvp_center = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tta_scores = s.unpack(str[start:end])
      start = end
      end += 4
      (self.tta_count,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3H().pack(_x.obj_id, _x.obj_index, _x.n_points))
      length = len(self.xyzvp)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.xyzvp.tostring())
      length = len(self.xyzvp_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.xyzvp_center.tostring())
      length = len(self.tta_scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.tta_scores.tostring())
      _x = self.tta_count
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.obj_id, _x.obj_index, _x.n_points,) = _get_struct_3H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xyzvp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.xyzvp_center = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tta_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.tta_count,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3H = None
def _get_struct_3H():
    global _struct_3H
    if _struct_3H is None:
        _struct_3H = struct.Struct("<3H")
    return _struct_3H
