# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbePcFrameHeader.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg

class arbePcFrameHeader(genpy.Message):
  _md5sum = "ea7e8a42429d20d4636665fbdb9eab60"
  _type = "arbe_msgs/arbePcFrameHeader"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64 time
uint16 frame_counter
uint8  is_4d
uint8  frame_type
uint16 udp_lost_packages
uint32 number_of_points
uint16 crd_count
arbeFrameTypes frame_types

================================================================================
MSG: arbe_msgs/arbeFrameTypes
uint8 Frame_Type_3d_short = 1
uint8 Frame_Type_3d_mid = 2
uint8 Frame_Type_3d_long = 3
uint8 Frame_Type_3d_ultra_long = 13
uint8 Frame_Type_4d_short = 4
uint8 Frame_Type_4d_mid = 5
uint8 Frame_Type_4d_long = 6
uint8 Frame_Type_4d_ultra_long = 16
"""
  __slots__ = ['time','frame_counter','is_4d','frame_type','udp_lost_packages','number_of_points','crd_count','frame_types']
  _slot_types = ['uint64','uint16','uint8','uint8','uint16','uint32','uint16','arbe_msgs/arbeFrameTypes']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,frame_counter,is_4d,frame_type,udp_lost_packages,number_of_points,crd_count,frame_types

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbePcFrameHeader, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0
      if self.frame_counter is None:
        self.frame_counter = 0
      if self.is_4d is None:
        self.is_4d = 0
      if self.frame_type is None:
        self.frame_type = 0
      if self.udp_lost_packages is None:
        self.udp_lost_packages = 0
      if self.number_of_points is None:
        self.number_of_points = 0
      if self.crd_count is None:
        self.crd_count = 0
      if self.frame_types is None:
        self.frame_types = arbe_msgs.msg.arbeFrameTypes()
    else:
      self.time = 0
      self.frame_counter = 0
      self.is_4d = 0
      self.frame_type = 0
      self.udp_lost_packages = 0
      self.number_of_points = 0
      self.crd_count = 0
      self.frame_types = arbe_msgs.msg.arbeFrameTypes()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QH2BHIH().pack(_x.time, _x.frame_counter, _x.is_4d, _x.frame_type, _x.udp_lost_packages, _x.number_of_points, _x.crd_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.frame_types is None:
        self.frame_types = arbe_msgs.msg.arbeFrameTypes()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.time, _x.frame_counter, _x.is_4d, _x.frame_type, _x.udp_lost_packages, _x.number_of_points, _x.crd_count,) = _get_struct_QH2BHIH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QH2BHIH().pack(_x.time, _x.frame_counter, _x.is_4d, _x.frame_type, _x.udp_lost_packages, _x.number_of_points, _x.crd_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.frame_types is None:
        self.frame_types = arbe_msgs.msg.arbeFrameTypes()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.time, _x.frame_counter, _x.is_4d, _x.frame_type, _x.udp_lost_packages, _x.number_of_points, _x.crd_count,) = _get_struct_QH2BHIH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QH2BHIH = None
def _get_struct_QH2BHIH():
    global _struct_QH2BHIH
    if _struct_QH2BHIH is None:
        _struct_QH2BHIH = struct.Struct("<QH2BHIH")
    return _struct_QH2BHIH
