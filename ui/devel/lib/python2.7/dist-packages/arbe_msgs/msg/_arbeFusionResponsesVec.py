# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeFusionResponsesVec.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg
import std_msgs.msg

class arbeFusionResponsesVec(genpy.Message):
  _md5sum = "e85897c08185dc25f773baf17831351f"
  _type = "arbe_msgs/arbeFusionResponsesVec"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
uint64 dt
arbeFusionResponse[] responses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: arbe_msgs/arbeFusionResponse
bool valid
uint16 obj_id
uint32 query_id
uint8 fusionClass
uint16 obj_index
uint64 queryTime
float32 conf
uint8 tta_count
float32[] tta_scores
string class_str
arbeFusionClasses fusionClasses

uint16  top
uint16  left
uint16  bottom
uint16  right

================================================================================
MSG: arbe_msgs/arbeFusionClasses
uint16 FC_BIKE = 0
uint16 FC_TRUCK_BUS = 1
uint16 FC_VRU = 2
uint16 FC_CAR = 3
uint16 FC_NOT_CLASSIFIED = 4
uint16 NUM_CLASSES = 4
"""
  __slots__ = ['header','dt','responses']
  _slot_types = ['std_msgs/Header','uint64','arbe_msgs/arbeFusionResponse[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,dt,responses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeFusionResponsesVec, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.dt is None:
        self.dt = 0
      if self.responses is None:
        self.responses = []
    else:
      self.header = std_msgs.msg.Header()
      self.dt = 0
      self.responses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dt
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.responses)
      buff.write(_struct_I.pack(length))
      for val1 in self.responses:
        _x = val1
        buff.write(_get_struct_BHIBHQfB().pack(_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count))
        length = len(val1.tta_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.tta_scores))
        _x = val1.class_str
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.fusionClasses
        pass
        _x = val1
        buff.write(_get_struct_4H().pack(_x.top, _x.left, _x.bottom, _x.right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.responses is None:
        self.responses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.dt,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.responses = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeFusionResponse()
        _x = val1
        start = end
        end += 23
        (_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count,) = _get_struct_BHIBHQfB().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tta_scores = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_str = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_str = str[start:end]
        _v2 = val1.fusionClasses
        _x = val1
        start = end
        end += 8
        (_x.top, _x.left, _x.bottom, _x.right,) = _get_struct_4H().unpack(str[start:end])
        self.responses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.dt
      buff.write(_get_struct_Q().pack(_x))
      length = len(self.responses)
      buff.write(_struct_I.pack(length))
      for val1 in self.responses:
        _x = val1
        buff.write(_get_struct_BHIBHQfB().pack(_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count))
        length = len(val1.tta_scores)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.tta_scores.tostring())
        _x = val1.class_str
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.fusionClasses
        pass
        _x = val1
        buff.write(_get_struct_4H().pack(_x.top, _x.left, _x.bottom, _x.right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.responses is None:
        self.responses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.dt,) = _get_struct_Q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.responses = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeFusionResponse()
        _x = val1
        start = end
        end += 23
        (_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count,) = _get_struct_BHIBHQfB().unpack(str[start:end])
        val1.valid = bool(val1.valid)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.tta_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.class_str = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.class_str = str[start:end]
        _v4 = val1.fusionClasses
        _x = val1
        start = end
        end += 8
        (_x.top, _x.left, _x.bottom, _x.right,) = _get_struct_4H().unpack(str[start:end])
        self.responses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4H = None
def _get_struct_4H():
    global _struct_4H
    if _struct_4H is None:
        _struct_4H = struct.Struct("<4H")
    return _struct_4H
_struct_BHIBHQfB = None
def _get_struct_BHIBHQfB():
    global _struct_BHIBHQfB
    if _struct_BHIBHQfB is None:
        _struct_BHIBHQfB = struct.Struct("<BHIBHQfB")
    return _struct_BHIBHQfB
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
