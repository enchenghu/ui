# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeTSlamMetadata.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class arbeTSlamMetadata(genpy.Message):
  _md5sum = "9f419d3fbb87f9bdc08e8e38e6a62de8"
  _type = "arbe_msgs/arbeTSlamMetadata"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint64  CorresPcTime
uint16  FrameNumber
float32 HostHeading
float32 HostHeadingUnc
float32 HostVelocity
float32 HostVelocityUnc
float32 HostOmega		
float32 HostOmegaUnc
uint16  NumberOfObjects
float32 local_catr_x
float32 local_catr_y
bool    location_valid
bool    is_reset_geo_location

"""
  __slots__ = ['CorresPcTime','FrameNumber','HostHeading','HostHeadingUnc','HostVelocity','HostVelocityUnc','HostOmega','HostOmegaUnc','NumberOfObjects','local_catr_x','local_catr_y','location_valid','is_reset_geo_location']
  _slot_types = ['uint64','uint16','float32','float32','float32','float32','float32','float32','uint16','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       CorresPcTime,FrameNumber,HostHeading,HostHeadingUnc,HostVelocity,HostVelocityUnc,HostOmega,HostOmegaUnc,NumberOfObjects,local_catr_x,local_catr_y,location_valid,is_reset_geo_location

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeTSlamMetadata, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.CorresPcTime is None:
        self.CorresPcTime = 0
      if self.FrameNumber is None:
        self.FrameNumber = 0
      if self.HostHeading is None:
        self.HostHeading = 0.
      if self.HostHeadingUnc is None:
        self.HostHeadingUnc = 0.
      if self.HostVelocity is None:
        self.HostVelocity = 0.
      if self.HostVelocityUnc is None:
        self.HostVelocityUnc = 0.
      if self.HostOmega is None:
        self.HostOmega = 0.
      if self.HostOmegaUnc is None:
        self.HostOmegaUnc = 0.
      if self.NumberOfObjects is None:
        self.NumberOfObjects = 0
      if self.local_catr_x is None:
        self.local_catr_x = 0.
      if self.local_catr_y is None:
        self.local_catr_y = 0.
      if self.location_valid is None:
        self.location_valid = False
      if self.is_reset_geo_location is None:
        self.is_reset_geo_location = False
    else:
      self.CorresPcTime = 0
      self.FrameNumber = 0
      self.HostHeading = 0.
      self.HostHeadingUnc = 0.
      self.HostVelocity = 0.
      self.HostVelocityUnc = 0.
      self.HostOmega = 0.
      self.HostOmegaUnc = 0.
      self.NumberOfObjects = 0
      self.local_catr_x = 0.
      self.local_catr_y = 0.
      self.location_valid = False
      self.is_reset_geo_location = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QH6fH2f2B().pack(_x.CorresPcTime, _x.FrameNumber, _x.HostHeading, _x.HostHeadingUnc, _x.HostVelocity, _x.HostVelocityUnc, _x.HostOmega, _x.HostOmegaUnc, _x.NumberOfObjects, _x.local_catr_x, _x.local_catr_y, _x.location_valid, _x.is_reset_geo_location))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.CorresPcTime, _x.FrameNumber, _x.HostHeading, _x.HostHeadingUnc, _x.HostVelocity, _x.HostVelocityUnc, _x.HostOmega, _x.HostOmegaUnc, _x.NumberOfObjects, _x.local_catr_x, _x.local_catr_y, _x.location_valid, _x.is_reset_geo_location,) = _get_struct_QH6fH2f2B().unpack(str[start:end])
      self.location_valid = bool(self.location_valid)
      self.is_reset_geo_location = bool(self.is_reset_geo_location)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QH6fH2f2B().pack(_x.CorresPcTime, _x.FrameNumber, _x.HostHeading, _x.HostHeadingUnc, _x.HostVelocity, _x.HostVelocityUnc, _x.HostOmega, _x.HostOmegaUnc, _x.NumberOfObjects, _x.local_catr_x, _x.local_catr_y, _x.location_valid, _x.is_reset_geo_location))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.CorresPcTime, _x.FrameNumber, _x.HostHeading, _x.HostHeadingUnc, _x.HostVelocity, _x.HostVelocityUnc, _x.HostOmega, _x.HostOmegaUnc, _x.NumberOfObjects, _x.local_catr_x, _x.local_catr_y, _x.location_valid, _x.is_reset_geo_location,) = _get_struct_QH6fH2f2B().unpack(str[start:end])
      self.location_valid = bool(self.location_valid)
      self.is_reset_geo_location = bool(self.is_reset_geo_location)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QH6fH2f2B = None
def _get_struct_QH6fH2f2B():
    global _struct_QH6fH2f2B
    if _struct_QH6fH2f2B is None:
        _struct_QH6fH2f2B = struct.Struct("<QH6fH2f2B")
    return _struct_QH6fH2f2B
