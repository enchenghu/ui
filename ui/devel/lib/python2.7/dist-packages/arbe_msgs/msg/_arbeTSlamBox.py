# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeTSlamBox.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class arbeTSlamBox(genpy.Message):
  _md5sum = "e36bb424db9b07f679bc8512896c93f7"
  _type = "arbe_msgs/arbeTSlamBox"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 scale_x     
float32 scale_y     
float32 scale_z     
float32 scale_x_unc 
float32 scale_y_unc 
float32 scale_z_unc 
float32 orientation_unc  
float32 orientation  
"""
  __slots__ = ['scale_x','scale_y','scale_z','scale_x_unc','scale_y_unc','scale_z_unc','orientation_unc','orientation']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       scale_x,scale_y,scale_z,scale_x_unc,scale_y_unc,scale_z_unc,orientation_unc,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeTSlamBox, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.scale_x is None:
        self.scale_x = 0.
      if self.scale_y is None:
        self.scale_y = 0.
      if self.scale_z is None:
        self.scale_z = 0.
      if self.scale_x_unc is None:
        self.scale_x_unc = 0.
      if self.scale_y_unc is None:
        self.scale_y_unc = 0.
      if self.scale_z_unc is None:
        self.scale_z_unc = 0.
      if self.orientation_unc is None:
        self.orientation_unc = 0.
      if self.orientation is None:
        self.orientation = 0.
    else:
      self.scale_x = 0.
      self.scale_y = 0.
      self.scale_z = 0.
      self.scale_x_unc = 0.
      self.scale_y_unc = 0.
      self.scale_z_unc = 0.
      self.orientation_unc = 0.
      self.orientation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f().pack(_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation,) = _get_struct_8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
