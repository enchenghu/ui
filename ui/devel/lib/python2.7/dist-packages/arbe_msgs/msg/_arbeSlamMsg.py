# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeSlamMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg
import std_msgs.msg

class arbeSlamMsg(genpy.Message):
  _md5sum = "ad8727f4b769ffeff212c8a8f681cd8a"
  _type = "arbe_msgs/arbeSlamMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
arbeTSlamMetadata  meta_data
arbeTSlamObj[] ObjectsBuffer

arbeFusionClasses fusionClasses
uint16 FC_BIKE = 0
uint16 FC_TRUCK_BUS = 1
uint16 FC_VRU = 2
uint16 FC_CAR = 3
uint16 FC_NOT_CLASSIFIED = 4

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: arbe_msgs/arbeTSlamMetadata
uint64  CorresPcTime
uint16  FrameNumber
float32 HostHeading
float32 HostHeadingUnc
float32 HostVelocity
float32 HostVelocityUnc
float32 HostOmega		
float32 HostOmegaUnc
uint16  NumberOfObjects
float32 local_catr_x
float32 local_catr_y
bool    location_valid
bool    is_reset_geo_location


================================================================================
MSG: arbe_msgs/arbeTSlamObj
uint16              ID
uint16              obj_class
float32             class_conf
arbeTSlamPos        position
arbeTSlamVelocity   velocity 
arbeTSlamBox        bounding_box
uint32              age
uint16              last_frame_update



================================================================================
MSG: arbe_msgs/arbeTSlamPos
float32 x 
float32 y 
float32 z 
float32  dx 
float32  dy 
float32  dz

================================================================================
MSG: arbe_msgs/arbeTSlamVelocity
float32     x_dot 
float32     y_dot 
float32      dx_dot 
float32      dy_dot 

================================================================================
MSG: arbe_msgs/arbeTSlamBox
float32 scale_x     
float32 scale_y     
float32 scale_z     
float32 scale_x_unc 
float32 scale_y_unc 
float32 scale_z_unc 
float32 orientation_unc  
float32 orientation  

================================================================================
MSG: arbe_msgs/arbeFusionClasses
uint16 FC_BIKE = 0
uint16 FC_TRUCK_BUS = 1
uint16 FC_VRU = 2
uint16 FC_CAR = 3
uint16 FC_NOT_CLASSIFIED = 4
uint16 NUM_CLASSES = 4
"""
  # Pseudo-constants
  FC_BIKE = 0
  FC_TRUCK_BUS = 1
  FC_VRU = 2
  FC_CAR = 3
  FC_NOT_CLASSIFIED = 4

  __slots__ = ['header','meta_data','ObjectsBuffer','fusionClasses']
  _slot_types = ['std_msgs/Header','arbe_msgs/arbeTSlamMetadata','arbe_msgs/arbeTSlamObj[]','arbe_msgs/arbeFusionClasses']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,meta_data,ObjectsBuffer,fusionClasses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeSlamMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.meta_data is None:
        self.meta_data = arbe_msgs.msg.arbeTSlamMetadata()
      if self.ObjectsBuffer is None:
        self.ObjectsBuffer = []
      if self.fusionClasses is None:
        self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()
    else:
      self.header = std_msgs.msg.Header()
      self.meta_data = arbe_msgs.msg.arbeTSlamMetadata()
      self.ObjectsBuffer = []
      self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QH6fH2f2B().pack(_x.meta_data.CorresPcTime, _x.meta_data.FrameNumber, _x.meta_data.HostHeading, _x.meta_data.HostHeadingUnc, _x.meta_data.HostVelocity, _x.meta_data.HostVelocityUnc, _x.meta_data.HostOmega, _x.meta_data.HostOmegaUnc, _x.meta_data.NumberOfObjects, _x.meta_data.local_catr_x, _x.meta_data.local_catr_y, _x.meta_data.location_valid, _x.meta_data.is_reset_geo_location))
      length = len(self.ObjectsBuffer)
      buff.write(_struct_I.pack(length))
      for val1 in self.ObjectsBuffer:
        _x = val1
        buff.write(_get_struct_2Hf().pack(_x.ID, _x.obj_class, _x.class_conf))
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.dx, _x.dy, _x.dz))
        _v2 = val1.velocity
        _x = _v2
        buff.write(_get_struct_4f().pack(_x.x_dot, _x.y_dot, _x.dx_dot, _x.dy_dot))
        _v3 = val1.bounding_box
        _x = _v3
        buff.write(_get_struct_8f().pack(_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation))
        _x = val1
        buff.write(_get_struct_IH().pack(_x.age, _x.last_frame_update))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.meta_data is None:
        self.meta_data = arbe_msgs.msg.arbeTSlamMetadata()
      if self.ObjectsBuffer is None:
        self.ObjectsBuffer = None
      if self.fusionClasses is None:
        self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.meta_data.CorresPcTime, _x.meta_data.FrameNumber, _x.meta_data.HostHeading, _x.meta_data.HostHeadingUnc, _x.meta_data.HostVelocity, _x.meta_data.HostVelocityUnc, _x.meta_data.HostOmega, _x.meta_data.HostOmegaUnc, _x.meta_data.NumberOfObjects, _x.meta_data.local_catr_x, _x.meta_data.local_catr_y, _x.meta_data.location_valid, _x.meta_data.is_reset_geo_location,) = _get_struct_QH6fH2f2B().unpack(str[start:end])
      self.meta_data.location_valid = bool(self.meta_data.location_valid)
      self.meta_data.is_reset_geo_location = bool(self.meta_data.is_reset_geo_location)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ObjectsBuffer = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeTSlamObj()
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.obj_class, _x.class_conf,) = _get_struct_2Hf().unpack(str[start:end])
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.dx, _x.dy, _x.dz,) = _get_struct_6f().unpack(str[start:end])
        _v5 = val1.velocity
        _x = _v5
        start = end
        end += 16
        (_x.x_dot, _x.y_dot, _x.dx_dot, _x.dy_dot,) = _get_struct_4f().unpack(str[start:end])
        _v6 = val1.bounding_box
        _x = _v6
        start = end
        end += 32
        (_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation,) = _get_struct_8f().unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.age, _x.last_frame_update,) = _get_struct_IH().unpack(str[start:end])
        self.ObjectsBuffer.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_QH6fH2f2B().pack(_x.meta_data.CorresPcTime, _x.meta_data.FrameNumber, _x.meta_data.HostHeading, _x.meta_data.HostHeadingUnc, _x.meta_data.HostVelocity, _x.meta_data.HostVelocityUnc, _x.meta_data.HostOmega, _x.meta_data.HostOmegaUnc, _x.meta_data.NumberOfObjects, _x.meta_data.local_catr_x, _x.meta_data.local_catr_y, _x.meta_data.location_valid, _x.meta_data.is_reset_geo_location))
      length = len(self.ObjectsBuffer)
      buff.write(_struct_I.pack(length))
      for val1 in self.ObjectsBuffer:
        _x = val1
        buff.write(_get_struct_2Hf().pack(_x.ID, _x.obj_class, _x.class_conf))
        _v7 = val1.position
        _x = _v7
        buff.write(_get_struct_6f().pack(_x.x, _x.y, _x.z, _x.dx, _x.dy, _x.dz))
        _v8 = val1.velocity
        _x = _v8
        buff.write(_get_struct_4f().pack(_x.x_dot, _x.y_dot, _x.dx_dot, _x.dy_dot))
        _v9 = val1.bounding_box
        _x = _v9
        buff.write(_get_struct_8f().pack(_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation))
        _x = val1
        buff.write(_get_struct_IH().pack(_x.age, _x.last_frame_update))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.meta_data is None:
        self.meta_data = arbe_msgs.msg.arbeTSlamMetadata()
      if self.ObjectsBuffer is None:
        self.ObjectsBuffer = None
      if self.fusionClasses is None:
        self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.meta_data.CorresPcTime, _x.meta_data.FrameNumber, _x.meta_data.HostHeading, _x.meta_data.HostHeadingUnc, _x.meta_data.HostVelocity, _x.meta_data.HostVelocityUnc, _x.meta_data.HostOmega, _x.meta_data.HostOmegaUnc, _x.meta_data.NumberOfObjects, _x.meta_data.local_catr_x, _x.meta_data.local_catr_y, _x.meta_data.location_valid, _x.meta_data.is_reset_geo_location,) = _get_struct_QH6fH2f2B().unpack(str[start:end])
      self.meta_data.location_valid = bool(self.meta_data.location_valid)
      self.meta_data.is_reset_geo_location = bool(self.meta_data.is_reset_geo_location)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ObjectsBuffer = []
      for i in range(0, length):
        val1 = arbe_msgs.msg.arbeTSlamObj()
        _x = val1
        start = end
        end += 8
        (_x.ID, _x.obj_class, _x.class_conf,) = _get_struct_2Hf().unpack(str[start:end])
        _v10 = val1.position
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z, _x.dx, _x.dy, _x.dz,) = _get_struct_6f().unpack(str[start:end])
        _v11 = val1.velocity
        _x = _v11
        start = end
        end += 16
        (_x.x_dot, _x.y_dot, _x.dx_dot, _x.dy_dot,) = _get_struct_4f().unpack(str[start:end])
        _v12 = val1.bounding_box
        _x = _v12
        start = end
        end += 32
        (_x.scale_x, _x.scale_y, _x.scale_z, _x.scale_x_unc, _x.scale_y_unc, _x.scale_z_unc, _x.orientation_unc, _x.orientation,) = _get_struct_8f().unpack(str[start:end])
        _x = val1
        start = end
        end += 6
        (_x.age, _x.last_frame_update,) = _get_struct_IH().unpack(str[start:end])
        self.ObjectsBuffer.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Hf = None
def _get_struct_2Hf():
    global _struct_2Hf
    if _struct_2Hf is None:
        _struct_2Hf = struct.Struct("<2Hf")
    return _struct_2Hf
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_IH = None
def _get_struct_IH():
    global _struct_IH
    if _struct_IH is None:
        _struct_IH = struct.Struct("<IH")
    return _struct_IH
_struct_QH6fH2f2B = None
def _get_struct_QH6fH2f2B():
    global _struct_QH6fH2f2B
    if _struct_QH6fH2f2B is None:
        _struct_QH6fH2f2B = struct.Struct("<QH6fH2f2B")
    return _struct_QH6fH2f2B
