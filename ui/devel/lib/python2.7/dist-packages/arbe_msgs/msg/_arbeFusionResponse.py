# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from arbe_msgs/arbeFusionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arbe_msgs.msg

class arbeFusionResponse(genpy.Message):
  _md5sum = "9d16e7674f130b5c070b9bc414f29ed5"
  _type = "arbe_msgs/arbeFusionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool valid
uint16 obj_id
uint32 query_id
uint8 fusionClass
uint16 obj_index
uint64 queryTime
float32 conf
uint8 tta_count
float32[] tta_scores
string class_str
arbeFusionClasses fusionClasses

uint16  top
uint16  left
uint16  bottom
uint16  right

================================================================================
MSG: arbe_msgs/arbeFusionClasses
uint16 FC_BIKE = 0
uint16 FC_TRUCK_BUS = 1
uint16 FC_VRU = 2
uint16 FC_CAR = 3
uint16 FC_NOT_CLASSIFIED = 4
uint16 NUM_CLASSES = 4
"""
  __slots__ = ['valid','obj_id','query_id','fusionClass','obj_index','queryTime','conf','tta_count','tta_scores','class_str','fusionClasses','top','left','bottom','right']
  _slot_types = ['bool','uint16','uint32','uint8','uint16','uint64','float32','uint8','float32[]','string','arbe_msgs/arbeFusionClasses','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       valid,obj_id,query_id,fusionClass,obj_index,queryTime,conf,tta_count,tta_scores,class_str,fusionClasses,top,left,bottom,right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(arbeFusionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.valid is None:
        self.valid = False
      if self.obj_id is None:
        self.obj_id = 0
      if self.query_id is None:
        self.query_id = 0
      if self.fusionClass is None:
        self.fusionClass = 0
      if self.obj_index is None:
        self.obj_index = 0
      if self.queryTime is None:
        self.queryTime = 0
      if self.conf is None:
        self.conf = 0.
      if self.tta_count is None:
        self.tta_count = 0
      if self.tta_scores is None:
        self.tta_scores = []
      if self.class_str is None:
        self.class_str = ''
      if self.fusionClasses is None:
        self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()
      if self.top is None:
        self.top = 0
      if self.left is None:
        self.left = 0
      if self.bottom is None:
        self.bottom = 0
      if self.right is None:
        self.right = 0
    else:
      self.valid = False
      self.obj_id = 0
      self.query_id = 0
      self.fusionClass = 0
      self.obj_index = 0
      self.queryTime = 0
      self.conf = 0.
      self.tta_count = 0
      self.tta_scores = []
      self.class_str = ''
      self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()
      self.top = 0
      self.left = 0
      self.bottom = 0
      self.right = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BHIBHQfB().pack(_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count))
      length = len(self.tta_scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.tta_scores))
      _x = self.class_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4H().pack(_x.top, _x.left, _x.bottom, _x.right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fusionClasses is None:
        self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()
      end = 0
      _x = self
      start = end
      end += 23
      (_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count,) = _get_struct_BHIBHQfB().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tta_scores = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_str = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.top, _x.left, _x.bottom, _x.right,) = _get_struct_4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BHIBHQfB().pack(_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count))
      length = len(self.tta_scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.tta_scores.tostring())
      _x = self.class_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4H().pack(_x.top, _x.left, _x.bottom, _x.right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.fusionClasses is None:
        self.fusionClasses = arbe_msgs.msg.arbeFusionClasses()
      end = 0
      _x = self
      start = end
      end += 23
      (_x.valid, _x.obj_id, _x.query_id, _x.fusionClass, _x.obj_index, _x.queryTime, _x.conf, _x.tta_count,) = _get_struct_BHIBHQfB().unpack(str[start:end])
      self.valid = bool(self.valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tta_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.class_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.class_str = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.top, _x.left, _x.bottom, _x.right,) = _get_struct_4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H = None
def _get_struct_4H():
    global _struct_4H
    if _struct_4H is None:
        _struct_4H = struct.Struct("<4H")
    return _struct_4H
_struct_BHIBHQfB = None
def _get_struct_BHIBHQfB():
    global _struct_BHIBHQfB
    if _struct_BHIBHQfB is None:
        _struct_BHIBHQfB = struct.Struct("<BHIBHQfB")
    return _struct_BHIBHQfB
